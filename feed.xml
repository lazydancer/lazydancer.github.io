<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-12-08T14:34:56-05:00</updated><id>/feed.xml</id><title type="html">James Pucula</title><entry><title type="html">Advent Of Code 2019 Solutions</title><link href="/advent-of-code-2019-solutions.html" rel="alternate" type="text/html" title="Advent Of Code 2019 Solutions" /><published>2019-12-01T00:00:00-05:00</published><updated>2019-12-01T00:00:00-05:00</updated><id>/advent-of-code-2019-solutions</id><content type="html" xml:base="/advent-of-code-2019-solutions.html">&lt;p&gt;Python solutions to the daily coding puzzles, explained.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I first participated in Advent of Code in 2018. I enjoyed working on the challenges and I learned a lot. The goal of the advent of code is to try to get on the leaderboard which is the fastest people to complete the problem when it is released at midnight.&lt;/p&gt;

&lt;p&gt;Last year my goal was to complete all the problems. This year I will focus on writing clean code and writing more about my experience.&lt;/p&gt;

&lt;p&gt;Each code snippet is complete, runnable program. I have included my input for each day. While you are in the directory for the day (ex. /Day-01) you can run the code line this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python solution.py input.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also find all of these solutions on Github: &lt;a href=&quot;https://github.com/lazydancer/Advent-of-Code-2019&quot;&gt;lazydancer/Advent-of-Code-2019&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Table of Contents&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;Day 1: The Tyranny of the Rocket Equation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Day 2: 1202 Program Alarm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Day 3: Crossed Wires&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Day 4: Secure Container&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Day 5: Sunny with a Chance of Asteroids&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Day 6: Universal Orbit Map&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Day 7: Amplification Circuit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;1&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-1-the-tyranny-of-the-rocket-equation&quot;&gt;Day 1: The Tyranny of the Rocket Equation&lt;/h2&gt;

&lt;p&gt;For Part 1, we simply need to divide each module weight by 3 and substact 2. The only thing in my code that is unusally is the ‘//’ which is an integer divide. It acts as a round down function.&lt;/p&gt;

&lt;p&gt;For Part 2, we need to account for the extra weight of the fuel. This is done with a while loop where it looks for values which would add more fuel. When the fuel get less than 8.9999… the result will be 0.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fileinput&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;part_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;module_weights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fuel_calc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fuel_calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module_weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;	

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;part_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;module_weights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate_fuel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module_weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculate_fuel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module_weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;total_fuel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module_weight&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;total_fuel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_fuel&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 1 is'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 3188480
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 2 is'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 4779847
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The tyranny of the rocket equation relates to the ideal rocket equation. Which is interesting to derive. We have the follow the rule of conservation of momentum where the momentum in a closed system needs to remain constant.&lt;/p&gt;

&lt;div style=&quot;margin: 0 auto; max-width: 405px&quot;&gt;
&lt;img src=&quot;assets/advent-of-code-2019-solutions/Var_mass_system.svg&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;All this simplifies to…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mdv = v_exhaust * dm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This makes sense the change in the momentum of the ship is the change in mass of the ship times the exhaust speed&lt;/p&gt;

&lt;p&gt;Rearranging and integrating both sides with respect to time and knowing 1/x integrates to ln(x) and ln(a) - ln(b) = ln(a/b). Finds the ideal rocket equation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;v_final - v_inital = v-exhaust * ln(m_inital / m_final)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;2&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-2-1202-program-alarm&quot;&gt;Day 2: 1202 Program Alarm&lt;/h2&gt;

&lt;p&gt;For part 1, we need a run program which would set the pointer every 4 numbers. This is done with a simple for loop but not robust if another size of jump is needed.&lt;/p&gt;

&lt;p&gt;For part 2, we iterate over the program to find when a result is a desired number. The inputs are changed till the result is given. With only 100 possible values for the two. Leads to only 10,000 combinations and since order matters we look at the permutations using the builtin itertools module.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fileinput&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 1 is'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 4930687
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 2 is'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19690720&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 5335
&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noun&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_opcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_opcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;3&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-3-crossed-wires&quot;&gt;Day 3: Crossed Wires&lt;/h2&gt;

&lt;p&gt;This one was done in Rust&lt;/p&gt;

&lt;p&gt;For Part 1, we can find the path in which each wire takes, creating a vector of locations. Finding where the two wires interset is looking at where both wire end at a location. We can use a set data type to find the union, in this case a HashSet finding an intersection.&lt;/p&gt;

&lt;p&gt;For Part 2, we look for the shortest manhattan distance along the path of the wires.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;nf&quot;&gt;.expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Something went wrong reading the file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collisions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions_0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positions_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closest_collision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collisions&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Part One: {:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closest_collision&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quickest_collision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collisions&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Part Two: {:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quickest_collision&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'U'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'L'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.flat_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div id=&quot;4&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-4-secure-container&quot;&gt;Day 4: Secure Container&lt;/h2&gt;

&lt;p&gt;Part 1, we can find adjancent cells by taking a copy, shifting it by one and comparing against the original.&lt;/p&gt;

&lt;p&gt;Part 2, we can use a BTreeMap and count all of the numbers given finding if any are equal to 2.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;btree_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BTreeMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;only_doubles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;BTreeMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.or_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;adjancent_chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars_a&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;chars_a&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars_b&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;always_increase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars_a&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;chars_a&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars_b&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_1_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;387638&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;919123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;adjancent_chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;always_increase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;part_1_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_1_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;//466&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_2_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;387638&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;919123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;adjancent_chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;always_increase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;only_doubles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;part_2_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:?}: {:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_2_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_2_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;//292&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;5&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-5-sunny-with-a-chance-of-asteroids&quot;&gt;Day 5: Sunny with a Chance of Asteroids&lt;/h2&gt;

&lt;p&gt;Back to python&lt;/p&gt;

&lt;p&gt;Part 1, Using the old code from day 2, we had to introduce a new functions like input and ouput. The INPUT variable I made a global constant&lt;/p&gt;

&lt;p&gt;Part 2, even more functions were added and we needed to separate the pointer from the for loop and introduced more functions&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fileinput&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;INPUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INPUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 1 is'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 4930687
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INPUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 2 is'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 5335
&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;old_pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_opcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_opcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;third&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;first_parameter_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;second_parameter_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_parameter_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_parameter_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INPUT&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TEST diagnotic program output:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;6&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-6-universal-orbit-map&quot;&gt;Day 6: Universal Orbit Map&lt;/h2&gt;

&lt;p&gt;For part 1, we can set up a map which looks at what planet it orbits. For each planet going down the chain to the base. Finding the base is done by taking the differnce between two sets. The ‘guide’ is a hashmap for really quick lookup values&lt;/p&gt;

&lt;p&gt;For part 2, we can find the path of YOU and SAN back to the base element and the paths will be common until a divergent step. Add up the remain elements that aren’t common to find the paths between them.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fileinput&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;')'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# hash guide from planet to lower orbit 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guide&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# should be only one planet that doesn't have a guide value
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 1 is:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 162816
&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Find the descent patterns of YOU and SAN
# Match the first common element
# Add up the above to find the transfer distance - 2
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;you_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'YOU'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;you_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;you_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;san_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'SAN'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;san_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;san_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;diverge_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;san_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;san_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;diverge_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;steps_you&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;you_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diverge_step&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;steps_san&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;san_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diverge_step&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_san&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_you&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 2 is:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;7&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-7-amplification-circuit&quot;&gt;Day 7: Amplification Circuit&lt;/h2&gt;

&lt;p&gt;For part 1, we can use the itertools library and use the permutations function to get the result of the max&lt;/p&gt;

&lt;p&gt;For part 2, I didn’t get it done in the time I had. I think you need to keep the state of the program. I will come back to this, I will try to create a stateful ampifier class&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fileinput&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;highest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_settings&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intcode_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;highest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;highest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;highest&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The solution to part 1 is&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;highest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;intcode_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;   
    &lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'100'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ljust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div id=&quot;8&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;9&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;10&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;11&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;12&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;13&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;14&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;15&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;16&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;17&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;18&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;19&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;20&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;21&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;22&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;23&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;24&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;25&quot;&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Python solutions to the daily coding puzzles, explained.</summary></entry><entry><title type="html">Learning Rust</title><link href="/learning-rust.html" rel="alternate" type="text/html" title="Learning Rust" /><published>2019-09-30T00:00:00-04:00</published><updated>2019-09-30T00:00:00-04:00</updated><id>/learning-rust</id><content type="html" xml:base="/learning-rust.html">&lt;p&gt;From the Stacked Overlow annual survey, rust has had consistant high praise. I thought I would look at it as well. After a few months and a few projects,  I believe it deserves its praise.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;The area of the rectangle is {} square pixels.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It has an great community, “The Rust Book” is a great starting place for anyone learning the language. It has a package manager which is built-in to rust called Cargo. It compiles your packages, manages its dependences and upload them. Having common stucture in the package files helps when reviewing an existing package.&lt;/p&gt;

&lt;p&gt;Rust’s ownership model has been an experience. It reduces memory-errors during compile-time and no runtime or garbage collector are needed when the program is running. It is also unique in popular programming languages and takes a while to learn and get use to.&lt;/p&gt;

&lt;p&gt;Rust doesn’t have pointers (in safe mode) but I found the need to understand pointers to use rust, especially the difference between passed-by-value or passed-by-reference. This tripped me up for a while. I also learned about a how pointers can go wrong, if the pointer is pointing to data that is unreadable (Null pointers), a pointer that points to nothing (Dangling pointer) or dropping the data when it is needed by another pointer (Double free / Null pointer).&lt;/p&gt;

&lt;p&gt;If you find Rust interesting, I would recommend what I did:&lt;/p&gt;

&lt;p&gt;First, Spend a weekend using Rust on a problem that you were solving in Python. Give up the project because the compiler errors are driving you crazy&lt;/p&gt;

&lt;p&gt;Second, Spend a week reading the Rust Book and tell yourself you understand ownership model.&lt;/p&gt;

&lt;p&gt;Third, Spend the next weekend using rust on the project again. Get 90% of the way there but give up and vow to never to talk about rust again.&lt;/p&gt;

&lt;p&gt;Fourth, Wait two months, when you need to what to avoid C++ and turn to Rust as an alternative&lt;/p&gt;

&lt;p&gt;Fifth, Read the Rust book. Take your time and go through each example.&lt;/p&gt;

&lt;p&gt;Sixth, Do lots of mini problems. Get a feel for the ownership model. Realize that int,floats act differently than vec,string and box.&lt;/p&gt;

&lt;p&gt;Seventh, Do “Too Many Linked Lists” and feel like you know nothing again.&lt;/p&gt;

&lt;p&gt;Eighth Write some bigger stuff and complete what ever you set out to do in the fourth step.&lt;/p&gt;

&lt;p&gt;Nineth Write a blog article that you survived learning Rust and used it once. Secretly feel insecure about your software skills.&lt;/p&gt;

&lt;p&gt;Actually, start at step 5. When you get to step 9 send me a message with the link.&lt;/p&gt;</content><author><name></name></author><summary type="html">From the Stacked Overlow annual survey, rust has had consistant high praise. I thought I would look at it as well. After a few months and a few projects, I believe it deserves its praise.</summary></entry><entry><title type="html">Pathfinding</title><link href="/pathfinding.html" rel="alternate" type="text/html" title="Pathfinding" /><published>2019-05-30T00:00:00-04:00</published><updated>2019-05-30T00:00:00-04:00</updated><id>/pathfinding</id><content type="html" xml:base="/pathfinding.html">&lt;p&gt;I’m working on a project where I want to connect blocks together using paths. The paths can’t overlap and the algorithm needs to run fast as there are a lot of them.&lt;/p&gt;

&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;assets/pathfinding/BlockConnect.svg&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;In this post I will show various methods in pathfinding and look at the different trade-offs in speed, memory and “solution idealness” of the different approachs to take when pathfinding.&lt;/p&gt;

&lt;h2 id=&quot;common-elements&quot;&gt;Common Elements&lt;/h2&gt;

&lt;p&gt;Each of the following algorithms require two variables.&lt;/p&gt;

&lt;p&gt;The first is a list of visited locations. I’ll call this &lt;strong&gt;visited&lt;/strong&gt; and it’s coloured &lt;strong&gt;Blue&lt;/strong&gt; below.&lt;/p&gt;

&lt;p&gt;The second is a list which contains locations to check. I’ll call this &lt;strong&gt;queue&lt;/strong&gt;. For each element of the queue there will be the location and the path which lead to the location. Order is imporant, so this is best represented as a list of tuple elements. This is coloured &lt;strong&gt;Light Blue&lt;/strong&gt; below.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; 
         &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;random-walk-depth-first&quot;&gt;Random Walk (Depth-First)&lt;/h2&gt;

&lt;p&gt;Grab the location from the next in queue, add the neighbours to the front of the queue in random order. Grab the location from the next in queue, add the neighbours to the front of the queue in random order. Repeat till you land on your destination or your queue is empty.&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot;&gt;

&lt;source src=&quot;assets/pathfinding/depth.webm&quot; type=&quot;video/webm&quot; /&gt;

&lt;/video&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]:&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbour&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_neighbours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is an effective algorithm for small problems where any path will do. It has the benefit of being very simple to implement and can be faster to find a solution than a breadth-first search.&lt;/p&gt;

&lt;h2 id=&quot;brute-force-breadth-first&quot;&gt;Brute Force (Breadth-First)&lt;/h2&gt;

&lt;p&gt;If the optimal path is needed, you need to check each possible path and return the first path which finds the destination. This is very similar to brute-force in a combinatoric problem.&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot;&gt;

&lt;source src=&quot;assets/pathfinding/breadth.webm&quot; type=&quot;video/webm&quot; /&gt;

&lt;/video&gt;

&lt;p&gt;Instead of adding new neighbours to the front of the queue they are put at the end. This ensures we have visited all the neighbours before we introduce new ones.&lt;/p&gt;

&lt;!--
```python
while queue != []:
    (vertex, path) = queue.pop() 

    if vertex == board.end:
        return path + [board.end]

    for neighbour in add_neighbours(vertex):
        queue.insert(0, (neighbour, path + [neighbour]))

    visited.append(vertex)
```
--&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[]:&lt;/span&gt;
    &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;()&lt;/span&gt; 

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt; &lt;span class=&quot;ow&quot; style=&quot;opacity: 0.3;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;add_neighbours&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 1;&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This algorithm finds the best path through taking a step in each direction until it lands on the solution.&lt;/p&gt;

&lt;p&gt;To improve the algorithm, each “step” is not always equal. An algorithm where we can change the value of each step is called Dijkstra’s algorithm.&lt;/p&gt;

&lt;h2 id=&quot;flexibility-from-dijkstra&quot;&gt;Flexibility from (Dijkstra)&lt;/h2&gt;

&lt;p&gt;The same as above, we are going to explicitly define how far we have travelled. This allows us to vary the “weight” of moving from one location to another.&lt;/p&gt;

&lt;p&gt;In the code below, I added a weight variable in each element in the queue. This will be used to compare what location to check next.&lt;/p&gt;

&lt;p&gt;In this case, with a step being “1”, the results are exactly the same as breadth-first search. Replacing this value will change which locations are visited first.&lt;/p&gt;

&lt;!--
```python
while queue != []:
    queue = sorted(queue, lambda x: x[2], reverse=True)
    
    (vertex, path, weight) = queue.pop() 

    if vertex == board.end:
        return path + [board.end]

    for neighbour in add_neighbours(vertex):
        queue.insert(0, (neighbour, path + [neighbour], weight + 1))

    visited.append(vertex)
```
--&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[]:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;()&lt;/span&gt; 

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt; &lt;span class=&quot;ow&quot; style=&quot;opacity: 0.3;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;add_neighbours&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot; style=&quot;opacity: 0.3;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead of taking a step in every direction, what if we could take a step in the direction towards our target?&lt;/p&gt;

&lt;h2 id=&quot;with-a-little-help-from-a-heuristic-best-first&quot;&gt;With a Little Help From A Heuristic (Best-First)&lt;/h2&gt;

&lt;p&gt;In this algorithm, we look at all of the neighbours that have been added to the queue and go to the one that is closest to the final solution. Closest refering to the linear distance between the location and the target.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;distance(a, b) = ((b[0] - a[0]), (b[1] - a[1]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In some cases this is the best solution, but when a wall is between the start and the destination, the solution is not optimal as the path walks into a wall than has to back up.&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot;&gt;

&lt;source src=&quot;assets/pathfinding/best.webm&quot; type=&quot;video/webm&quot; /&gt;

&lt;/video&gt;

&lt;p&gt;To change this from Dijkstra’s algorithm, instead of ordering the queue by “weight distance”, you order the queue by distance from the destination with the closest being at the front of the queue.&lt;/p&gt;

&lt;!--
```python
while queue != []:
    queue = sorted(queue, lambda x: distance(x[0], board.end), reverse=True)

    (vertex, path, weight) = queue.pop() 

    if vertex == board.end:
        return path + [board.end]

    for neighbour in add_neighbours(vertex):
        queue.insert(0, (neighbour, path + [neighbour], weight + 1))

    visited.append(vertex)
```
--&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[]:&lt;/span&gt;
    &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot; style=&quot;opacity: 0.3;&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot; style=&quot;opacity: 0.3;&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;()&lt;/span&gt; 

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt; &lt;span class=&quot;ow&quot; style=&quot;opacity: 0.3;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;add_neighbours&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot; style=&quot;opacity: 0.3;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;opacity: 0.3;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mix-for-taste-a&quot;&gt;Mix For Taste (A*)&lt;/h2&gt;

&lt;p&gt;We can balance the idealness of Dijkstra’s algorithm with the speed of the Best-First search by combining both metrics for ordering the queue.&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot;&gt;

&lt;source src=&quot;assets/pathfinding/astar.webm&quot; type=&quot;video/webm&quot; /&gt;

&lt;/video&gt;

&lt;p&gt;When determining the queue order, both the weight from the start and the distance to the destination are used.&lt;/p&gt;

&lt;!--
```python
while queue != []:
    queue = sorted(queue, lambda x: x[2] + distance(x[0], board.end), reverse=True)
    (vertex, path, weight) = queue.pop() 

    if vertex == board.end:
        return path + [board.end]

    for neighbour in add_neighbours(vertex):
        queue.insert(0, (neighbour, path + [neighbour], weight + 1))

    visited.append(vertex)
```
--&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[]:&lt;/span&gt;
    &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot; style=&quot;opacity: 0.3;&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;), &lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot; style=&quot;opacity: 0.3;&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;()&lt;/span&gt; 

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt; &lt;span class=&quot;ow&quot; style=&quot;opacity: 0.3;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;add_neighbours&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot; style=&quot;opacity: 0.3;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;opacity: 0.3;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This balance directs the search while looking at multiple solutions in that direction to find a close to ideal solution.&lt;/p&gt;

&lt;h2 id=&quot;graph-theory-and-networks&quot;&gt;Graph Theory and Networks&lt;/h2&gt;

&lt;p&gt;Pathfinding is an important method in connecting two nodes in a network. Networks are found everywhere. From the chemical reaction pathways inside a cell, transportion systems, and to the trade and political networks that shape our world.&lt;/p&gt;

&lt;p&gt;These algorithms give an introduction to the costs and benefits of each to help solve real challenges in these networks.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, I would recommend checking out my post on &lt;a href=&quot;https://pucula.com/map-colouring.html&quot;&gt;Map Coloring&lt;/a&gt;. Also, I have posted all of the code on &lt;a href=&quot;https://github.com/lazydancer/path-finding&quot;&gt;github&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m working on a project where I want to connect blocks together using paths. The paths can’t overlap and the algorithm needs to run fast as there are a lot of them.</summary></entry><entry><title type="html">Map Colouring</title><link href="/map-colouring.html" rel="alternate" type="text/html" title="Map Colouring" /><published>2019-04-02T00:00:00-04:00</published><updated>2019-04-02T00:00:00-04:00</updated><id>/map-colouring</id><content type="html" xml:base="/map-colouring.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Map_coloring&quot;&gt;Map colouring&lt;/a&gt; is an interesting puzzle where you are looking to assign different colours to different feautures on a map. It was first mentioned in 1852 as a mathamatics problem to determine the minimum number of colors when trying to colour a map of England. It was postulated that 4 colors were the minimum number of colours to fill a map so that no regions sharing a common border had the same colour.&lt;/p&gt;

&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;assets/map-colouring/English_ceremonial_counties_1998.svg&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;Since then computers have got much quicker and there are many different proof methods for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Four_color_theorem&quot;&gt;Four color theorem&lt;/a&gt; and was the first major theorem to be proved using a computer in 1976.&lt;/p&gt;

&lt;p&gt;When converting the map to a graph, with the features represents as nodes and the borders as connections this becomes a more difficult problem and more useful part of graph theory. It could be used in scheduling problems, register allocation problems and problems such as pattern matching and solving Sudoku puzzles.&lt;/p&gt;

&lt;h2 id=&quot;solving&quot;&gt;Solving&lt;/h2&gt;

&lt;p&gt;For the second segment of the discrete optimization course you need to colour a map where each neighbouring country is a different colour. The challenge is to find the smallest number of colours to fill in the map. Like the other problems in this course, this is an NP problem.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Nodes&lt;/th&gt;
      &lt;th&gt;Colours&lt;/th&gt;
      &lt;th&gt;Number of States&lt;/th&gt;
      &lt;th&gt;Time to Solve*&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Small Example&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;3,486,784,401 or 10^9&lt;/td&gt;
      &lt;td&gt;2 seconds&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Counties of England&lt;/td&gt;
      &lt;td&gt;83&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;10^50&lt;/td&gt;
      &lt;td&gt;10^36 years&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Countries of the World&lt;/td&gt;
      &lt;td&gt;195&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;10^117&lt;/td&gt;
      &lt;td&gt;10^103 years&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;*Assuming 2GHz computer, very optimistically checking 1 combination a cycle&lt;/p&gt;

&lt;h2 id=&quot;brute-force&quot;&gt;Brute force&lt;/h2&gt;

&lt;p&gt;I would start by trying every single combination and returning the best solution. Computers are great with numbers and I want to be lazy. But looking at the table above there is no way to complete this in a reasonable time.&lt;/p&gt;

&lt;p&gt;We need another way&lt;/p&gt;

&lt;h2 id=&quot;pick-most-connected&quot;&gt;Pick most connected&lt;/h2&gt;

&lt;p&gt;Instead of trying every combination, lets order the way we select the nodes we colour. Starting from the node which has the most connections, choosing its colour and moving to the next, adding a new colour if neighbouring nodes used all the previous colors. This will run until all the colours are chosen&lt;/p&gt;

&lt;p&gt;This is so much faster! It is a greedy algorithm so it doesn’t give us an optimal result, but the speed is important here. When you add a new node, it adds only a small amount of time and is close to linear.&lt;/p&gt;

&lt;h2 id=&quot;saturation&quot;&gt;Saturation&lt;/h2&gt;

&lt;p&gt;This method is very similar to the “most connected” but in this case the next node to select will update each time. When a node is colored the connected nodes are updated with a new saturation number. This saturation number tells how many different colors a node neighbours with. The other name for this algorithm is DSATUR and is a well known algorithm for completing this problem&lt;/p&gt;

&lt;h2 id=&quot;continuing&quot;&gt;Continuing&lt;/h2&gt;

&lt;p&gt;So far it has been interesting on how large NP problems can get and we have to try different algorithms. A good enough solution is much easier to get than a perfect solution. I will continue to write more about this as I go through the class and it looks like there is some possibility of using local search.&lt;/p&gt;

&lt;p&gt;Thank you for reading&lt;/p&gt;</content><author><name></name></author><summary type="html">Map colouring is an interesting puzzle where you are looking to assign different colours to different feautures on a map. It was first mentioned in 1852 as a mathamatics problem to determine the minimum number of colors when trying to colour a map of England. It was postulated that 4 colors were the minimum number of colours to fill a map so that no regions sharing a common border had the same colour.</summary></entry><entry><title type="html">Pictures To Text</title><link href="/pictures-to-text.html" rel="alternate" type="text/html" title="Pictures To Text" /><published>2019-03-16T00:00:00-04:00</published><updated>2019-03-16T00:00:00-04:00</updated><id>/pictures-to-text</id><content type="html" xml:base="/pictures-to-text.html">&lt;p&gt;Converted a picture into text just for fun. To complete this I used jupyter notebook, found below. The code is avaliable on &lt;a href=&quot;https://github.com/lazydancer/pictotxt&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot; style=&quot;line-height:1;&quot;&gt;&lt;pre class=&quot;highlight&quot; style=&quot;font-size: 11px;&quot;&gt;&lt;code&gt;.gMBy         
  WgM_        
  M@DMg_      
  $BMGDMg     
   `MgZMMg_   
    _&amp;lt;V _MMK_ 
  _1P&quot;`    &quot;gg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The notebook contains 3 parts:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Image&lt;/strong&gt; - Input image to be converted. It’s chopped up into little bits.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Font&lt;/strong&gt; - Input font. The characters are extrated as images.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Calc&lt;/strong&gt; - the images and font characters are compared to find the best match&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PIL&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageDraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageFont&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;skimage.util.shape&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view_as_blocks&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;image&quot;&gt;Image&lt;/h2&gt;

&lt;p&gt;First thing is import the image. As an example I use the finch. Most of the following code is to convert the image from a PIL array to numpy’s 2D narray and use matlibplot plot function.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'L'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;show_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'download.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;assets/pictures-to-text/download (1).png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;The next step is taking the imported image and converting it into character sized images. The heart of the following methods are the &lt;strong&gt;view_as_blocks&lt;/strong&gt;. The function fails if there is an overlap with the  edge of the imported image. The function &lt;strong&gt;trim_image&lt;/strong&gt; is there to remove the excess before it sent in to &lt;strong&gt;view_as_blocks&lt;/strong&gt;. The result can be seen below.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trim_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;trim_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_y&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;trim_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_x&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trim_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trim_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_image_slices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'L'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#greyscale
&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view_as_blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;char_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;char_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_image_slices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'download.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nb_across&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nb_down&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nb_across&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nb_down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;assets/pictures-to-text/download2.png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;h2 id=&quot;fonts&quot;&gt;Fonts&lt;/h2&gt;

&lt;p&gt;Now we have the images, we can match characters to them. First we need to get images of the font to compare. We will be using the ascii character set, this is found in the &lt;strong&gt;string.printable&lt;/strong&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;font_images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;truetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fonts/SFMono-Regular.otf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printable&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'RGB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageDraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'L'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#greyscale
&lt;/span&gt;        
        &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;letters_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font_images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;assets/pictures-to-text/download3.png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;h2 id=&quot;calc&quot;&gt;Calc&lt;/h2&gt;

&lt;p&gt;Now we have sections of the input image and character images, we just need to pick the best match. In this case I used:&lt;/p&gt;

&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;assets/pictures-to-text/download4.png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;where A and B are matricis of the same size. We want the lowest score as that will be the smallest difference. I guess I could have inverted it so we were looking for the max or I could have called it the loss function.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solve_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;min_score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;min_letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;min_score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;min_letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;min_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;assets/pictures-to-text/download5.png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;Now we can finish it by collecting the characters and printing&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;result_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot; style=&quot;line-height:1;&quot;&gt;&lt;pre class=&quot;highlight&quot; style=&quot;font-size: 11px;&quot;&gt;&lt;code&gt;.gMBy         
  WgM_        
  M@DMg_      
  $BMGDMg     
   `MgZMMg_   
    _&amp;lt;V _MMK_ 
  _1P&quot;`    &quot;gg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks for reading, this was a slightly different style. For future articles, follow me on &lt;a href=&quot;https://twitter.com/lazydancr&quot;&gt;twitter&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Converted a picture into text just for fun. To complete this I used jupyter notebook, found below. The code is avaliable on github.</summary></entry><entry><title type="html">Intro To Fossil Fuels</title><link href="/intro-to-fossil-fuels.html" rel="alternate" type="text/html" title="Intro To Fossil Fuels" /><published>2019-02-22T00:00:00-05:00</published><updated>2019-02-22T00:00:00-05:00</updated><id>/intro-to-fossil-fuels</id><content type="html" xml:base="/intro-to-fossil-fuels.html">&lt;p&gt;Formed over millions of years, fossil fuels are essential to way we live and have greatly improved our standard of living. Today, &lt;strong&gt;87%&lt;/strong&gt; of the world’s primary energy is from fossil fuels. In this article I will give an overview of these fuel sources.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: rgb(127, 0, 0); font-weight: bold&quot;&gt;Coal&lt;/span&gt;, &lt;span style=&quot;color: rgb(184, 13, 8); font-weight: bold&quot;&gt;Crude Oil&lt;/span&gt; and &lt;span style=&quot;color: rgb(241, 109, 74); font-weight: bold&quot;&gt;Natural Gas&lt;/span&gt;&lt;/p&gt;

&lt;svg class=&quot;current_energy&quot; width=&quot;700&quot; height=&quot;50&quot;&gt;&lt;rect width=&quot;199.49999999999997&quot; height=&quot;50&quot; x=&quot;0&quot; style=&quot;fill: rgb(127, 0, 0);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;244.99999999999997&quot; height=&quot;50&quot; x=&quot;199.49999999999997&quot; style=&quot;fill: rgb(184, 13, 8);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;167.29999999999998&quot; height=&quot;50&quot; x=&quot;444.49999999999994&quot; style=&quot;fill: rgb(241, 109, 74);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;49.699999999999996&quot; height=&quot;50&quot; x=&quot;611.8&quot; style=&quot;fill: rgb(253, 205, 153);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;2.1&quot; height=&quot;50&quot; x=&quot;661.5&quot; style=&quot;fill: rgb(255, 240, 219);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;2.8000000000000003&quot; height=&quot;50&quot; x=&quot;663.6&quot; style=&quot;fill: rgb(255, 241, 223);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;18.2&quot; height=&quot;50&quot; x=&quot;666.4&quot; style=&quot;fill: rgb(255, 243, 228);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;11.9&quot; height=&quot;50&quot; x=&quot;684.6&quot; style=&quot;fill: rgb(255, 245, 232);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;4.9&quot; height=&quot;50&quot; x=&quot;696.5&quot; style=&quot;fill: rgb(255, 245, 232);&quot;&gt;&lt;/rect&gt;&lt;/svg&gt;

&lt;h2 id=&quot;coal&quot;&gt;Coal&lt;/h2&gt;

&lt;p&gt;Millions of years ago, plants died and other plants died on these plants forming peat. With every additional layer of plant matter, the layers below were compressed and heated forming coal, a carbon rich and energy density material.&lt;/p&gt;

&lt;p&gt;Coal was a critical fuel of the Industrial Revolution, being vital for steam engines and furnaces. Before coal, wood was the primary fuel used but over time the transition occured due to it being cheaper and more energy dense&lt;/p&gt;

&lt;p&gt;Not all coal is the same, the two most important factors to classifying coal are its calorific value, how much energy can it release when burned, and its percent of carbon, a higher percent carbon is a cleaner burning fuel, other atoms hydrogen, sulfur, oxygen and nitrogen are common.&lt;/p&gt;

&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;assets/fossil-fuels/Coal_Rank_USGS.png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Produced&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bituminous&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;46%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Subbituminous&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;45%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Lignite&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Anthracite&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;lt;1%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Coal can also be used to form coke, which improves its carbon purity. With the increased purity, it can be burned at higher temperatures which is important as a fuel and reducing agent in smelting iron ore.&lt;/p&gt;

&lt;p&gt;Coal’s main use is the generation of electricity. This is done through boiling water into steam and spinning a turbine connected to a generator to create electricity. The overall thermodynamic efficiency is between 25% to 50%.&lt;/p&gt;

&lt;p&gt;With newer technologies, the coal can be convert the coal to Syngas to a heat recovery steam generator. This powers a steam turbine and the waste heat can be used to heat a process or a building. This type of power plant could reach efficiencies up to 94%.&lt;/p&gt;

&lt;h3 id=&quot;stats&quot;&gt;Stats&lt;/h3&gt;

&lt;p&gt;We can divide the end use into direct, either in a vehicle or in a manufacturing process and electricity where we make electricity first. Out of the three fossil fuels coal is the most difficult to transport and creates the most pollution. Therefore coal is popular in electricity generation outside of cities.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Direct 32%&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cost&lt;/td&gt;
      &lt;td&gt;3.9&lt;/td&gt;
      &lt;td&gt;USD/GJ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Specific Energy&lt;/td&gt;
      &lt;td&gt;0.030&lt;/td&gt;
      &lt;td&gt;GJ/kg&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Energy Density&lt;/td&gt;
      &lt;td&gt;38&lt;/td&gt;
      &lt;td&gt;GJ/m^3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Emission Intensity&lt;/td&gt;
      &lt;td&gt;96&lt;/td&gt;
      &lt;td&gt;kgCO2e/GJ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Electricity Generation 68%&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cost&lt;/td&gt;
      &lt;td&gt;34.7&lt;/td&gt;
      &lt;td&gt;USD/GJ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Emission Intensity&lt;/td&gt;
      &lt;td&gt;265&lt;/td&gt;
      &lt;td&gt;kgCO2e/GJ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;crude-oil&quot;&gt;Crude Oil&lt;/h2&gt;

&lt;p&gt;Also known as &lt;em&gt;Petroleum&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Formed when zooplankton and algae died and buried underneath sedimentary rock and compressed and heated for millions of years. Crude oil is a combination of many different carbon chains.  These carbon chains are separated using a process called fractional distillation, which seperates products by boiling point. Each chain’s has a different boiling point, for example methane has -161.5 degC and gasoline has a boiling point of 35 degC. These form products such as gasoline, diesel, methane, asphalt and chemicals to make plastic.&lt;/p&gt;

&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;assets/fossil-fuels/Crude_Oil_Distillation.png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;As the same with coal, not all crude oil is the same. Coal is usually classified to where it is found, for example “WTI”, “Bret” and “Oman”. The fuel in these large pockets all have similar characteristics.&lt;/p&gt;

&lt;p&gt;When comparing these pockets, the two largest factors are its sulfur content and API gravity. API gravity is a function of density and is a measure on how heavy or light the crude oil is.&lt;/p&gt;

&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;assets/fossil-fuels/Crudes.png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;A high API is desired as more gasoline can be extracted from it and a low sulfur content is desired as less processing is needed to remove or capture the excess sulfur.&lt;/p&gt;

&lt;h3 id=&quot;stats-1&quot;&gt;Stats&lt;/h3&gt;

&lt;p&gt;Most crude oil is refined into fuels that we use in a vehicle, gasoline, diesel and jet fuel. Very little is used in electrical generation, therefore I was not able to find a cost of generating electricity. For direct use, I am showing gasoline.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Direct 96%&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cost&lt;/td&gt;
      &lt;td&gt;14.0&lt;/td&gt;
      &lt;td&gt;USD/GJ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Specific Energy&lt;/td&gt;
      &lt;td&gt;0.046&lt;/td&gt;
      &lt;td&gt;GJ/kg&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Energy Density&lt;/td&gt;
      &lt;td&gt;34&lt;/td&gt;
      &lt;td&gt;GJ/m^3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Emission Intensity&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;kgCO2e/GJ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Electricity Generation 4%&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;natural-gas&quot;&gt;Natural Gas&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Natural gas consists of mostly methane. Similar to crude oil and coal it is formed from decaying organic matter and therefore is found close to both coal and crude oil layers. When extracting oil in the 19th and 20th century it was common to burn off the unwanted natural gas.&lt;/p&gt;

&lt;div class=&quot;centerImage&quot; style=&quot;max-width: 200px;&quot;&gt;
&lt;img src=&quot;assets/fossil-fuels/640px-Methane-2D-dimensions.svg.png&quot; width=&quot;200px&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;Natural gas is very important and is mostly used directly. It is a low density fuel compared to crude oil and coal, so it has limitation were it can be used. It is relatively clean burning, making it useful domestic heating and electricity generation.&lt;/p&gt;

&lt;p&gt;Natural gas is classified by how pure the methane is but is not a large a factor as seen in crude oil and coal. Processing the natural gas involves striping out sulfur, ethane, propane, butanes and natural gasoline so it is under limits set by the government.&lt;/p&gt;

&lt;p&gt;When converting to electricity, most natural gas-fire electrical generation uses a combined-cycle gas turbines process with a conversion efficiency of 62%.&lt;/p&gt;

&lt;h3 id=&quot;stats-2&quot;&gt;Stats&lt;/h3&gt;

&lt;p&gt;Natural gas is used both in direct consumption for heating, cooking and in electrical generation. It also has lower CO2 emissions than other fossil fuels making it more environmentally friendlily option in comparison.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Direct 58%&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cost&lt;/td&gt;
      &lt;td&gt;3.35&lt;/td&gt;
      &lt;td&gt;USD/GJ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Specific Energy&lt;/td&gt;
      &lt;td&gt;0.056&lt;/td&gt;
      &lt;td&gt;GJ/kg&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Energy Density&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;GJ/m^3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Emission Intensity&lt;/td&gt;
      &lt;td&gt;56&lt;/td&gt;
      &lt;td&gt;kgCO2e/GJ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Electricity Generation 42%&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cost&lt;/td&gt;
      &lt;td&gt;27.46&lt;/td&gt;
      &lt;td&gt;USD/GJ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Emission Intensity&lt;/td&gt;
      &lt;td&gt;166&lt;/td&gt;
      &lt;td&gt;kgCO2e/GJ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I hope this was a useful introduction to the largest energy sources that we use. I always heard about renewable energy but feel like I didn’t understand the energy system until I studied fossil fuels. They all have their benefits and drawbacks but I believe they will be important in the future.&lt;/p&gt;

&lt;p&gt;In this write up I made a lot of assumptions and each number depends on my factors.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ourworldindata.org/fossil-fuels&quot;&gt;Our World in Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.iea.org/Sankey/&quot;&gt;Sankey&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cement-co2-protocol.org/en/Content/Internet_Manual/constants.htm&quot;&gt;Emission Factors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cost_of_electricity_by_source&quot;&gt;Levelized Cost of Energy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.eia.gov/energyexplained/index.php?page=coal_prices&quot;&gt;Coal Price&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vaclavsmil.com/2016/12/14/energy-transitions-global-and-national-perspectives-second-expanded-and-updated-edition/&quot;&gt;Vaclav Smil (2017)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bp.com/en/global/corporate/energy-economics/statistical-review-of-world-energy.html&quot;&gt;BP Statistical Review of World Energy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ipcc.ch/site/assets/uploads/2018/02/ipcc_wg3_ar5_annex-iii.pdf&quot;&gt;IPCC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Formed over millions of years, fossil fuels are essential to way we live and have greatly improved our standard of living. Today, 87% of the world’s primary energy is from fossil fuels. In this article I will give an overview of these fuel sources.</summary></entry><entry><title type="html">Advent Of Code 2018</title><link href="/advent-of-code-2018.html" rel="alternate" type="text/html" title="Advent Of Code 2018" /><published>2019-01-04T00:00:00-05:00</published><updated>2019-01-04T00:00:00-05:00</updated><id>/advent-of-code-2018</id><content type="html" xml:base="/advent-of-code-2018.html">&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    !
  -~*~-
   /!\
  /%;@\
 o/@,%\o
 /%;`@,\
o/@'%',\o
'^^^N^^^`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://adventofcode.com/&quot;&gt;Advent of Code&lt;/a&gt; is an annual programming competition to complete 25 challenges in December. It’s a way grow as a programmer, through solving problems and reveiwing others code. In this article I will cover two things I learned about this year and try to convince you to join next years competition.&lt;/p&gt;

&lt;h3 id=&quot;1-assembly-language&quot;&gt;1. Assembly Language&lt;/h3&gt;

&lt;p&gt;I have always be interested in how computers work, &lt;em&gt;see&lt;/em&gt; &lt;a href=&quot;https://pucula.com/making-a-transistor-from-scratch-part-1.html&quot;&gt;building a transistor from scratch&lt;/a&gt;. I have never had the chance to program in assembly. That changed on &lt;a href=&quot;https://adventofcode.com/2018/day/16&quot;&gt;Day 16&lt;/a&gt;, the challenge was to run a new programming language called elf code. Elf code looked almost identical to assembly.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first number is the opcode, which could represent 1 of 16 operations, ‘add’, ‘mul’, ‘mov’. The second and third were inputs and the forth was what register to use for the output.&lt;/p&gt;

&lt;p&gt;First, I wrote the code in python. It turned out way too slow, even with pypy and a better data structure. I got it down to 1/10th of the original but after 3 hours, I stopped it.&lt;/p&gt;

&lt;p&gt;To solve it, you need to watch how the elf code is being executed, find the pattern and simplify the logic. I was curious if this could be completed by running right on the hardware.&lt;/p&gt;

&lt;p&gt;Using an intermeddiate step to C, Below is a snippet of the assembly. ‘;’ is a comment. The ‘l01’, ‘l02’, ‘l03’ and ‘l07’ are labels. For example the first command is jmp l17, which is jump to label l17.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;l17&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;;  L00: goto *jump_table[0+16+1]; //addi 3 16 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;;  L01: reg[1] = 1; //seti 1 2 1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;r12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;;  L02: reg[2] = 1; //seti 1 1 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l03&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;  L03: reg[5] = reg[1] * reg[2]; //mulr 1 2 5&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r12&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;imul&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rbx&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;r15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;r15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r14&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;  L04: reg[5] = reg[5] == reg[4]; //eqrr 5 4 5&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;sete&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;al&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;;  Grab the flag&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;movzx&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;al&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;;  Move the flag to r15 extends with zeros&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;je&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;l07&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;;  L05: goto *jump_table[reg[5] + 5 + 1]; //addr 5 3 3&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;l08&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;;  L06: goto *jump_table[6 + 1 + 1]; //addi 3 1 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;r10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;  L07: reg[0] = reg[1] + reg[0]; //addr 1 0 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the end the assembly was not fast enough, even being roughly 20x faster than my original python implementation.&lt;/p&gt;

&lt;p&gt;Along the way I learned x86-64 commands, registers, flags and jump commands. I also learned why assembly is not written. This code ran about as fast as the C code that I made but not being portable between different computers and being somewhat hard to follow. Below is the code to write a single character to the screen.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;[value],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r10&lt;/span&gt;     
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;; system call for write&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;; file handle 1 is stdout&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;; address of string to output&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;; number of bytes&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;; invoke operating system to do the write&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;; system call for exit&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;xor&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;; exit code 0&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;; invoke operating system to exit &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All the code can be found on my &lt;a href=&quot;https://github.com/lazydancer/Advent-of-Code-2018/tree/master/Day%2019&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-python-imports&quot;&gt;2. Python Imports&lt;/h3&gt;

&lt;p&gt;Most of the time I avoid python imports, I found the default data types do the job. During these challenges, I have come to love defaultdict, copy, dequeue. Also networkx for building networks and re for regular expressions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;defaultdict&lt;/strong&gt; - Having a set value for when nothing exist is a very useful feature&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;somedict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;somedict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# KeyError
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;someddict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someddict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# print int(), thus 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;copy&lt;/strong&gt; - Because python calls list by reference this is useful to keep things functional&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deepcopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;dequeue&lt;/strong&gt; - A double-ended queue, this is useful for when rotation is needed with a rotate function&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;xrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;networkx&lt;/strong&gt; - This was useful for all types of graph equations. Shortest path was used many times&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;networkx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...adding nodes...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;networkx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortest_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;re&lt;/strong&gt; - This is a very popular library I have tried to avoid it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jamie Zawinski&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now I follow Jeff Atwoods take on &lt;a href=&quot;https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/&quot;&gt;them&lt;/a&gt;. They are amazing but only when you use them sparsely. As an example, the line below grabs the numbers from the a line of text and converts them to integers&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'-?\d+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;During the challenge, I read as much as I coded. Reading other peoples code was enlightening. You saw how they approached the problem and what trade-offs they chose.&lt;/p&gt;

&lt;p&gt;Thank you &lt;a href=&quot;http://was.tl/&quot;&gt;Eric Wastl&lt;/a&gt; for creating advent of code and everybody that shared their solutions online. I learned a lot.&lt;/p&gt;</content><author><name></name></author><summary type="html">! -~*~- /!\ /%;@\ o/@,%\o /%;`@,\ o/@'%',\o '^^^N^^^`</summary></entry><entry><title type="html">Making A Transistor From Scratch Part 2</title><link href="/making-a-transistor-from-scratch-part-2.html" rel="alternate" type="text/html" title="Making A Transistor From Scratch Part 2" /><published>2018-12-07T00:00:00-05:00</published><updated>2018-12-07T00:00:00-05:00</updated><id>/making-a-transistor-from-scratch-part-2</id><content type="html" xml:base="/making-a-transistor-from-scratch-part-2.html">&lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;

&lt;meta name=&quot;twitter:site&quot; content=&quot;@flickr&quot; /&gt;

&lt;meta name=&quot;twitter:title&quot; content=&quot;Making a Transistor from Scratch Part 2&quot; /&gt;

&lt;meta name=&quot;twitter:description&quot; content=&quot;In this article we will be going from rocks to a transistor&quot; /&gt;

&lt;meta name=&quot;twitter:image&quot; content=&quot;https://pucula.com/assets/making-a-transistor/Quartzite.png&quot; /&gt;

&lt;p&gt;This is a continuation of Part 1 where we learnt about the importance of silicon, p-type and n-type materials and the theory of a MOSFET transistor. &lt;a href=&quot;making-a-transistor-from-scratch-part-1.html&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article we will be going from rocks to a transistor&lt;/p&gt;

&lt;p&gt;As seen in the last part ultra-pure silicon is necessary to build a transistor. Any contamination to the silicon in a semiconductor changes it properties and causes it to not work.&lt;/p&gt;

&lt;h3 id=&quot;quartz-rock&quot;&gt;Quartz Rock&lt;/h3&gt;

&lt;p&gt;Our base raw material is quartz rock, a form of silicon dioxide&lt;/p&gt;

&lt;p&gt;Silicon makes up around 28% by mass of the earth’s crust, the second after oxygen and technically we could use any silicon dioxide, but there is already an ultrapure silicon dioxide called quartzite, a type of quartz rock&lt;/p&gt;

&lt;p&gt;Quartizite was originally sandstone, but it has been deeply buried in the Earth’s crust and cooked at high temperatures and pressures that many impurities have been distilled out and the sand grains completely welded together.&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;assets/making-a-transistor/Quartzite.jpg&quot; style=&quot;max-width: 480px; width: 100%&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:12px&quot;&gt;https://commons.wikimedia.org/wiki/File:Quartzite_Solli%C3%A8res.jpg&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;metallugical-silicon&quot;&gt;Metallugical Silicon&lt;/h3&gt;

&lt;p&gt;The next step is to remove all of the oxygen present in silicon dioxide. This can be done though the following reaction&lt;/p&gt;

&lt;p&gt;2SiO2 + 2C -&amp;gt; Si + 2CO&lt;/p&gt;

&lt;p&gt;The process occurs in an electric arc furnance to a temperature of 2,000C and the quartz is mixed with highly pure coke. Coke is a highly pure carbon fuel made by heating coal in the absensce of air.&lt;/p&gt;

&lt;p&gt;This processs is know as a carbothermal reduction of silicon dioxide.&lt;/p&gt;

&lt;p&gt;With the reaction above, there is a good chance of silicon carbide, SiC, forming. Excess SiO2 is used to help prevent this forming a secondary reaction.&lt;/p&gt;

&lt;p&gt;2 SiC + SiO2 -&amp;gt; 3Si + 2CO&lt;/p&gt;

&lt;p&gt;Now we have silicon with up to 99% purity but we are looking up to have “eleven nines” purity or 99.999999999%.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Silicon#Metallurgical_grade&quot;&gt;Silicon wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ultra-pure-silicon-poly-silicon&quot;&gt;Ultra Pure Silicon (poly-silicon)&lt;/h3&gt;

&lt;p&gt;The next step is to remove the contaniments to get an ultra pure silicon we are looking for.&lt;/p&gt;

&lt;p&gt;The silicon is reacted with hydrogen chloride gas to form triclorosilane (SiHCl2)&lt;/p&gt;

&lt;p&gt;Si + 3 HCl → HCl3Si + H2&lt;/p&gt;

&lt;p&gt;Reduced to very pure solution by reacting it with hydrogen at high temperatures&lt;/p&gt;

&lt;p&gt;HSiCl3 → Si + HCl + Cl2&lt;/p&gt;

&lt;p&gt;Or triclorosilane can be converted to silicon tetrachloride, SiCl4, in a hydrogenation reactor and reduced by vapor phase epitaxy with hydrogen&lt;/p&gt;

&lt;p&gt;SiCl4 + 2H2 -&amp;gt; Si + 4HCl&lt;/p&gt;

&lt;p&gt;Depending on specifics of the cost, both process are used.&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;assets/making-a-transistor/PolySilicon.jpg&quot; style=&quot;max-width: 480px; width: 100%;&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:12px&quot;&gt;http://images-of-elements.com/silicon.jpg&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;single-crystal-silicon-mono-silicon&quot;&gt;Single crystal silicon (mono-silicon)&lt;/h3&gt;

&lt;p&gt;In a process called the Czochralski process the poly-silicon which contains mulitple crystals of silicon will be transformed into a single crystal&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/making-a-transistor/Schematic_of_allotropic_forms_of_silcon.svg.png&quot; height=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-size:12px&quot;&gt; https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Schematic_of_allotropic_forms_of_silcon.svg/800px-Schematic_of_allotropic_forms_of_silcon.svg.png&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A seed crystal is dipped into liquid pure silicon and slowly raised and rotated built the single cystal ingot of pure silicon.&lt;/p&gt;

&lt;p&gt;As the crystal is being formed some containimates are pushed out if the contanimates aren’t able to fit in that structure. This called zone refining&lt;/p&gt;

&lt;h3 id=&quot;wafer&quot;&gt;Wafer&lt;/h3&gt;

&lt;p&gt;The ingot is sliced into wafer by a diamonded edged saw and cleaned to specifications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/making-a-transistor/1024px-Siliziumwafer.JPG&quot; style=&quot;max-width:420px; width:100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-size:12px&quot;&gt; https://upload.wikimedia.org/wikipedia/commons/thumb/f/f0/Siliziumwafer.JPG/1024px-Siliziumwafer.JPG&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;transistor&quot;&gt;Transistor&lt;/h3&gt;

&lt;p&gt;There are many types of transistors because of space, efficency and cost the metal-oxide-semiconductor FET (MOSFET) is currently the most used.&lt;/p&gt;

&lt;p&gt;In this part we are going to look how it is built. Under each slide there are details on how it completed.&lt;/p&gt;

&lt;div class=&quot;slideShow&quot; style=&quot;padding: 20px&quot;&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Start with the P-Type Si Wafer&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;
&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;
&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;The start of the process is at the begining of the other. Usaully this is done in another facility called a foundary.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Oxide Grown&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;200&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;

&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;The first step is generate an SiO2 layer(0.5 -1 um thick) by thermal oxidation. Usally within the range of 900 to 1200 degrees C and a gas flow rate of 1cm/s&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Applied&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;200&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;200&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;


&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;

&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;Next step is first mask used by photolithography and is developed with raditation and the excess is removed &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Developed&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;200&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;60&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;140&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#C7CED4&quot; /&gt;



&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;

&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;The next step is to etch the material that is showing. A chemical is used to attack the oxide layer but not the photoresist or the silicon &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Oxide Etched&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;60&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;rect x=&quot;140&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;



&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;

&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;The next step is to etch the material that is showing. A chemical is used to attack the oxide layer but not the photoresist or the silicon &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Removed&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;60&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;rect x=&quot;140&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;



&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;The photoresist is removed using a solvent or plasma oxidation &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Phosphorus Diffused&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;



&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;60&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;140&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;Phosphorus is diffused to make it an n-type region. This is done by Constant Surance Concentration Condition and followed by a drive-in diffusion under a Constant-Total-Dopant Conition  &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Oxide Grown&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;200&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;An oxide layer is grown again. The phosphorus spreads out a little due to diffusion but remains at a high concentration &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;PR Applied&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;25.5&quot; width=&quot;200&quot; height=&quot;45&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;200&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;The second photolithography is allplied (PR Drop -&amp;gt;Spinning -&amp;gt;Pre-Baking -&amp;gt;Mask Alignment-&amp;gt;UV Exposure -&amp;gt; PR Developing -&amp;gt; Rinsing and Drying -&amp;gt; Post-Baking -&amp;gt; Oxide Etching) as in Lithography #1 is use  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresit Developed&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;25.5&quot; width=&quot;80&quot; height=&quot;45&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;140&quot; y=&quot;25.5&quot; width=&quot;80&quot; height=&quot;45&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;200&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;100&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;The second photolithography is allplied (PR Drop -&amp;gt;Spinning -&amp;gt;Pre-Baking -&amp;gt;Mask Alignment-&amp;gt;UV Exposure -&amp;gt; PR Developing -&amp;gt; Rinsing and Drying -&amp;gt; Post-Baking -&amp;gt; Oxide Etching) as in Lithography #1 is use  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Oxide Etched&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;25.5&quot; width=&quot;80&quot; height=&quot;45&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;140&quot; y=&quot;25.5&quot; width=&quot;80&quot; height=&quot;45&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;100&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;100&quot; y=&quot;260.5&quot; width=&quot;5&quot; height=&quot;40&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;260.5&quot; width=&quot;5&quot; height=&quot;40&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;PR Stripped&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;100&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;100&quot; y=&quot;260.5&quot; width=&quot;5&quot; height=&quot;40&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;260.5&quot; width=&quot;5&quot; height=&quot;40&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Gate Oxide Grown&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Added&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;25.5&quot; width=&quot;200&quot; height=&quot;56&quot; fill=&quot;#47B881&quot; /&gt;


&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;


&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Developed&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;25.5&quot; width=&quot;60&quot; height=&quot;56&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;25.5&quot; width=&quot;60&quot; height=&quot;56&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;25.5&quot; width=&quot;60&quot; height=&quot;56&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;80&quot; y=&quot;275.5&quot; width=&quot;10&quot; height=&quot;10&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;150&quot; y=&quot;275.5&quot; width=&quot;10&quot; height=&quot;10&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Oxide Etched&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;25.5&quot; width=&quot;60&quot; height=&quot;56&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;25.5&quot; width=&quot;60&quot; height=&quot;56&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;25.5&quot; width=&quot;60&quot; height=&quot;56&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;80&quot; y=&quot;275.5&quot; width=&quot;10&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;rect x=&quot;150&quot; y=&quot;275.5&quot; width=&quot;10&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Removed&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;


&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;80&quot; y=&quot;275.5&quot; width=&quot;10&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;rect x=&quot;150&quot; y=&quot;275.5&quot; width=&quot;10&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Aluminium Film Deposited&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20.5&quot; y=&quot;35.5&quot; width=&quot;44.5&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;60&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;70.5&quot; width=&quot;40&quot; height=&quot;12&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;175&quot; y=&quot;35.5&quot; width=&quot;44.5&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#66788A&quot; /&gt;




&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;270.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#66788A&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;286&quot;&gt;Aluminum&lt;/text&gt;
&lt;/svg&gt;
&lt;p&gt; Now a metal such as Aluminum is then evoporated and deposited on the surface to form a film to create the contacts  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Applied&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;20.5&quot; width=&quot;200&quot; height=&quot;55&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;20.5&quot; y=&quot;35.5&quot; width=&quot;44.5&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;60&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;70.5&quot; width=&quot;40&quot; height=&quot;12&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;175&quot; y=&quot;35.5&quot; width=&quot;44.5&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;




&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;270.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#66788A&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;286&quot;&gt;Aluminum&lt;/text&gt;
&lt;/svg&gt;
&lt;p&gt;  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Applied&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;45&quot; y=&quot;20.5&quot; width=&quot;50&quot; height=&quot;55&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;105&quot; y=&quot;20.5&quot; width=&quot;30&quot; height=&quot;55&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;145&quot; y=&quot;20.5&quot; width=&quot;50&quot; height=&quot;55&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;35.5&quot; width=&quot;45&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;60&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;70.5&quot; width=&quot;40&quot; height=&quot;12&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;175&quot; y=&quot;35.5&quot; width=&quot;45&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#66788A&quot; /&gt;

&lt;rect x=&quot;105&quot; y=&quot;185.5&quot; width=&quot;30&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;45&quot; y=&quot;270.5&quot; width=&quot;50&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;145&quot; y=&quot;270.5&quot; width=&quot;50&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;



&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;270.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#66788A&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;286&quot;&gt;Aluminum&lt;/text&gt;
&lt;/svg&gt;
&lt;p&gt;  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Aluminum Etched&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;45&quot; y=&quot;20.5&quot; width=&quot;50&quot; height=&quot;55&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;105&quot; y=&quot;20.5&quot; width=&quot;30&quot; height=&quot;55&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;145&quot; y=&quot;20.5&quot; width=&quot;50&quot; height=&quot;55&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;45&quot; y=&quot;35.5&quot; width=&quot;20&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;60&quot; y=&quot;55.5&quot; width=&quot;35&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;105&quot; y=&quot;70.5&quot; width=&quot;30&quot; height=&quot;12&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;145&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;175&quot; y=&quot;35.5&quot; width=&quot;20&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;105&quot; y=&quot;185.5&quot; width=&quot;30&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;45&quot; y=&quot;270.5&quot; width=&quot;50&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;145&quot; y=&quot;270.5&quot; width=&quot;50&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;



&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;270.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#66788A&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;286&quot;&gt;Aluminum&lt;/text&gt;
&lt;/svg&gt;
&lt;p&gt;  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Removed&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;45&quot; y=&quot;35.5&quot; width=&quot;20&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;60&quot; y=&quot;55.5&quot; width=&quot;35&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;105&quot; y=&quot;70.5&quot; width=&quot;30&quot; height=&quot;12&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;145&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;175&quot; y=&quot;35.5&quot; width=&quot;20&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;105&quot; y=&quot;185.5&quot; width=&quot;30&quot; height=&quot;200&quot; fill=&quot;#66788A&quot; /&gt;

&lt;rect x=&quot;45&quot; y=&quot;270.5&quot; width=&quot;50&quot; height=&quot;20&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;145&quot; y=&quot;270.5&quot; width=&quot;50&quot; height=&quot;20&quot; fill=&quot;#66788A&quot; /&gt;



&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;270.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#66788A&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;286&quot;&gt;Aluminum&lt;/text&gt;
&lt;/svg&gt;
&lt;p&gt;  &lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;style&gt;
.slide {height: 603px;}
&lt;/style&gt;

&lt;script&gt;

var slideIndex = 0
var min = 0
var max = 21

const showSlide = () =&gt; {
let slides = document.getElementsByClassName(&quot;slide&quot;)
slides = [].slice.call(slides); // Convert to array to use map function

slides.map((slide) =&gt; slide.style.display = &quot;none&quot;)

slides[slideIndex].style.display = &quot;block&quot;;
}

const next = () =&gt; {
if (slideIndex &lt; max)
showSlide(slideIndex += 1)
}
const back = () =&gt; {
if (slideIndex &gt; min)
showSlide(slideIndex -= 1)
}



showSlide()

&lt;/script&gt;

&lt;p&gt;&lt;button onclick=&quot;back()&quot;&gt;Back&lt;/button&gt;
&lt;button onclick=&quot;next()&quot;&gt;Next&lt;/button&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading. I enjoyed making this summary and learnt so much.&lt;/p&gt;

&lt;p&gt;In the next post I will be using this to make a NAND gate which will be the final step to getting to the point where it become binary logic&lt;/p&gt;

&lt;p&gt;If you are interested in this post keep up to date by following me on Twitter &lt;a href=&quot;https://twitter.com/lazydancr&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Oil Refineries Around The World</title><link href="/oil-refineries-around-the-world.html" rel="alternate" type="text/html" title="Oil Refineries Around The World" /><published>2018-11-30T00:00:00-05:00</published><updated>2018-11-30T00:00:00-05:00</updated><id>/oil-refineries-around-the-world</id><content type="html" xml:base="/oil-refineries-around-the-world.html">&lt;style&gt;
#content .map path {
  fill: #ddd;
  stroke: #aaa;
}

#content circle {
	fill: rgba(0,0,0,0.4);
}

div.tooltip {
  color: white;
  position: absolute;
  text-align: center;
  width: 100px;
  height: 60px;
  padding: 2px;
  font: 12px sans-serif;
  background: rgba(0,0,0,.8);
  border: 1px solid black;
  pointer-events: none;
}

&lt;/style&gt;

&lt;body&gt;
  &lt;div id=&quot;content&quot;&gt;
    &lt;svg width=&quot;800px&quot; height=&quot;400px&quot;&gt;
      &lt;g class=&quot;map&quot;&gt;&lt;/g&gt;
    &lt;/svg&gt;
  &lt;/div&gt;

  &lt;p&gt;source: &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_oil_refineries&quot;&gt;Wikipedia: List of oil refineries&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;I was testing d3js, GEOjson and some javascript code which I found interesting and wanted to share.&lt;/p&gt;

  &lt;p&gt;Oil refineries are the backbone of the world economy, most of our energy generated is from fossil fuels and refineries play an essential role. Currently there are about 660 of them&lt;/p&gt;

  &lt;p&gt;In the chart above I have shown the 10 largest refineries. The largest is in India called the Jamnagar Refinery. It has the capacity of refining 1,240,000 barrels of crude oil per day.&lt;/p&gt;

  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/d3/4.2.2/d3.min.js&quot;&gt;&lt;/script&gt;

  &lt;script&gt;
var geojson = {
  &quot;type&quot;: &quot;FeatureCollection&quot;,
  &quot;features&quot;: [
    {
      &quot;type&quot;: &quot;Feature&quot;,
      &quot;properties&quot;: {
        &quot;name&quot;: &quot;Africa&quot;
      },
      &quot;geometry&quot;: {
        &quot;type&quot;: &quot;Polygon&quot;,
        &quot;coordinates&quot;: [[[-6, 36], [33, 30], [43, 11], [51, 12], [29, -33], [18, -35], [7, 5], [-17, 14], [-6, 36]]]
      }
    },
    {
      &quot;type&quot;: &quot;Feature&quot;,
      &quot;properties&quot;: {
        &quot;name&quot;: &quot;Australia&quot;
      },
      &quot;geometry&quot;: {
        &quot;type&quot;: &quot;Polygon&quot;,
        &quot;coordinates&quot;: [[[143, -11], [153, -28], [144, -38], [131, -31], [116, -35], [114, -22], [136, -12], [140, -17], [143, -11]]]
      }
    },
    {
      &quot;type&quot;: &quot;Feature&quot;,
      &quot;properties&quot;: {
        &quot;name&quot;: &quot;Timbuktu&quot;
      },
      &quot;geometry&quot;: {
        &quot;type&quot;: &quot;Point&quot;,
        &quot;coordinates&quot;: [-3.0026, 16.7666]
      }
    }
  ]
};

var refineries = [
	{&quot;name&quot;: &quot;Jamnager Refinery&quot;, &quot;location&quot;: &quot;Jamnagar, Gujarat, India&quot;, &quot;production&quot; : 1240000, &quot;coordinates&quot;: [69.52, 22.20]},
	{&quot;name&quot;: &quot;Paraguana Refinery&quot;, &quot;location&quot;: &quot;Punto Fijo, Falcón, Venezuela&quot;, &quot;production&quot; : 940000, &quot;coordinates&quot;: [-70.11, 11.44]},
	{&quot;name&quot;: &quot;SK Energy Ulsan Refinery&quot;, &quot;location&quot;: &quot;Ulsan, South Korea&quot;, &quot;production&quot; : 850000, &quot;coordinates&quot;: [129.34, 35.43]},
	{&quot;name&quot;: &quot;Ruwais Refinery&quot;, &quot;location&quot;: &quot;Ruwais, UAE&quot;, &quot;production&quot; :  	817000, &quot;coordinates&quot;: [52.72, 24.12]},
	{&quot;name&quot;: &quot;Yeosu Refinery&quot;, &quot;location&quot;: &quot;Yeosu, South Jeolla, South Korea&quot;, &quot;production&quot;: 730000, &quot;coordinates&quot;: [127.75, 34.72]},
	{&quot;name&quot;: &quot;Onsan Refinery&quot;, &quot;location&quot;: &quot;Ulsan, South Korea&quot;, &quot;production&quot;:  669000, &quot;coordinates&quot;: [129.34, 35.44]},
	{&quot;name&quot;: &quot;Jurong Island Refinery&quot;, &quot;location&quot;: &quot;Jurong Island, Singapore&quot;, &quot;production&quot;:  605000, &quot;coordinates&quot;: [103.70, 1.27]},
	{&quot;name&quot;: &quot;Port Arthur Refinery&quot;, &quot;location&quot;: &quot;Port Arthur, Texas, United States&quot;, &quot;production&quot;:  603000, &quot;coordinates&quot;: [-93.57, 29.53]},
	{&quot;name&quot;: &quot;Galveston Bay Refinery&quot;, &quot;location&quot;: &quot;Texas City, Texas, United States&quot;, &quot;production&quot;:  571000, &quot;coordinates&quot;: [-94.91, 29.40]},
	{&quot;name&quot;: &quot;Baytown Refinery&quot;, &quot;location&quot;: &quot;Baytown, Texas, United States&quot;, &quot;production&quot;:  560500, &quot;coordinates&quot;: [-95.01, 29.74]},
	{&quot;name&quot;: &quot;Garyville Refinery&quot;, &quot;location&quot;: &quot;Garyville, Louisiana, United States&quot;, &quot;production&quot;: 556000 , &quot;coordinates&quot;: [-90.36,30.03]},
	{&quot;name&quot;: &quot;Ras Tanura Refinery&quot;, &quot;location&quot;: &quot;Ras Tanura, Saudi Arabia&quot;, &quot;production&quot;: 550000 , &quot;coordinates&quot;: [50.10,26.39]},
	{&quot;name&quot;: &quot; 	Baton Rouge Refinery&quot;, &quot;location&quot;: &quot;Baton Rouge, Louisiana, United States&quot;, &quot;production&quot;: 502500, &quot;coordinates&quot;: [-91.10,30.29]},
	{&quot;name&quot;: &quot;Shell Pulau Bukom Refinery&quot;, &quot;location&quot;: &quot;Bukom Island, Singapore&quot;, &quot;production&quot;:  500000, &quot;coordinates&quot;: [103.45,1.14]},
	{&quot;name&quot;: &quot;Abadan Refinery&quot;, &quot;location&quot;: &quot;Abadan, Iran&quot;, &quot;production&quot;: 450000 , &quot;coordinates&quot;: [48.18,30.20]},

]




d3.json('/assets/maps/ne_110m_land.json', function(err, json) {
  createMap(json);
})

createMap = (geojson) =&gt; {

	var projection = d3.geoMercator()
	  .fitSize([722, 400], geojson)
	 
	var geoGenerator = d3.geoPath()
	  .projection(projection);

	function update(geojson) {
	  var u = d3.select('#content g.map')
	    .selectAll('path')
	    .data(geojson.features);

	  u.enter()
	    .append('path')
	    .attr('d', geoGenerator);
		
	  svg = d3.select(&quot;svg&quot;);

	  console.log(svg)

    // Define the div for the tooltip
    const div = d3
      .select('body')
      .append('div')
      .attr('class', 'tooltip')
      .style('opacity', 0);

    handleMouseOver = (d, i) =&gt; {
      div
        .transition()
        .duration(200)
        .style('opacity', 0.9);
      div
        .html(d.name + ' - ' + (d.production).toLocaleString('en') + ' barrels per day')
        .style('left', d3.event.pageX + 10 + 'px')
        .style('top', d3.event.pageY - 28 + 'px');

    }

    handleMouseOut = (d, i) =&gt; {
      div
            .transition()
            .duration(500)
            .style('opacity', 0);
    }
        
	  svg.append(&quot;g&quot;)
	  		.attr(&quot;class&quot;, &quot;bubble&quot;)
	  	.selectAll(&quot;circle&quot;)
	  		.data(refineries)
	  	.enter().append(&quot;circle&quot;)
	  		.attr(&quot;transform&quot;, d =&gt; &quot;translate(&quot; + projection(d.coordinates) + &quot;)&quot;)
	  		.attr(&quot;r&quot;, d =&gt; Math.sqrt(d.production/10000))
        .on('mouseover', handleMouseOver)
        .on('mouseout', handleMouseOut);

 
	}

	update(geojson);

}

  &lt;/script&gt;
&lt;/body&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Making A Transistor From Scratch Part 1</title><link href="/making-a-transistor-from-scratch-part-1.html" rel="alternate" type="text/html" title="Making A Transistor From Scratch Part 1" /><published>2018-11-19T00:00:00-05:00</published><updated>2018-11-19T00:00:00-05:00</updated><id>/making-a-transistor-from-scratch-part-1</id><content type="html" xml:base="/making-a-transistor-from-scratch-part-1.html">&lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;

&lt;meta name=&quot;twitter:site&quot; content=&quot;@lazydancr&quot; /&gt;

&lt;meta name=&quot;twitter:title&quot; content=&quot;Making A Transistor From Scratch Part 1&quot; /&gt;

&lt;meta name=&quot;twitter:description&quot; content=&quot;Starting with the theory on how a transistor is made!&quot; /&gt;

&lt;meta name=&quot;twitter:image&quot; content=&quot;https://pucula.com/assets/making-a-transistor/pn-junction.png&quot; /&gt;

&lt;p&gt;I recently finished the book CODE - a book on how to build a computer from scratch. The book was awesome and I wanted to learn more about how a physical computer was built
&lt;/p&gt;

&lt;p&gt;Silicon is great. It's great because it's a semiconductor. Semiconductors are great because we can create interesting properties of how much much energy it takes to release the electron from its orbit and how much energy it takes for an atom to accept an electron.

&lt;p&gt;This difference between an electron being released and being captured is important and has the name &lt;b&gt;band gap&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;When electrons can move we call that electricity. Some material like metal have no band gap meaning that electrons flow easily through them. Insulators there is a band gap and it is difficult.&lt;/p&gt;

&lt;p&gt;As seen in the diagram below semicondutors are between conductors and insulators&lt;/p&gt;

&lt;img src=&quot;/assets/making-a-transistor/351px-Band_filling_diagram.svg.png&quot; /&gt;

&lt;p&gt;
&lt;span style=&quot;font-size: 10px&quot;&gt; https://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Band_filling_diagram.svg&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;You can shift this band gap by doping silicon&lt;/p&gt;


&lt;li&gt;Silicon with &lt;b&gt;boron&lt;/b&gt; atoms is called &lt;b style=&quot;color: #1070CA&quot;&gt;p-type silicon&lt;/b&gt;, where there is a lack of electrons called holes&lt;/li&gt;
&lt;li&gt;Silicon with &lt;b&gt;phosphorus&lt;/b&gt; atoms is called &lt;b style=&quot;color: #F7D154&quot;&gt;n-type silicon&lt;/b&gt;, where free electrons are added&lt;/li&gt;

&lt;img src=&quot;/assets/making-a-transistor/psem2.gif&quot; /&gt;
&lt;img src=&quot;/assets/making-a-transistor/nsem.gif&quot; /&gt;

&lt;p&gt;
&lt;span style=&quot;font-size: 10px&quot;&gt;http://hyperphysics.phy-astr.gsu.edu/hbase/Solids/imgsol/psem2.gif and http://hyperphysics.phy-astr.gsu.edu/hbase/Solids/imgsol/nsem.gif&lt;/span&gt;


&lt;p&gt;Lets take a block of p-type silicon and a block of n-type silicon and put them together. 

&lt;p&gt;Where they touch electrons will move from n-type material to p-type material. This is because the n-type atoms have less &quot;hold&quot; on there valence electrons and the p-type is &quot;pulling&quot; these electron&lt;/p&gt;

&lt;p&gt;Since the n-type lost an electron, it is not balanced and has to many protons. Making the area positively charged. The equilent and opposite for the p-type. In the diagram below, the lighter yellow has a positive charge. 

&lt;p&gt;
&lt;svg viewBox=&quot;0 0 420 350&quot; width=&quot;100%&quot;&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; y=&quot;40px&quot; fill=&quot;#1070CA&quot; /&gt; 
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;220px&quot; y=&quot;40px&quot; fill=&quot;#F7D154&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;10px&quot; y=&quot;200px&quot; fill=&quot;#1070CA&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;210px&quot; y=&quot;200px&quot; fill=&quot;#F7D154&quot; /&gt;
  &lt;rect width=&quot;20px&quot; height=&quot;140px&quot; x=&quot;190px&quot; y=&quot;200px&quot; fill=&quot;white&quot; opacity=&quot;0.5&quot; /&gt;
  &lt;rect width=&quot;20px&quot; height=&quot;140px&quot; x=&quot;210px&quot; y=&quot;200px&quot; fill=&quot;white&quot; opacity=&quot;0.5&quot; /&gt;
&lt;/svg&gt;
&lt;/p&gt;
&lt;!--
&lt;p&gt;&lt;img src=&quot;https://www.electronics-tutorials.ws/diode/diode4a.gif&quot; /&gt;
--&gt;


&lt;p&gt;This charge causes a magnetic effect due unbalanced charges. The magnetic effect is the opposing effect to the movement of electrons causing an equilibrium at a certain distance&lt;/p&gt;

&lt;p&gt;Since we are displacing electrons from there position, this magnetic effect can also be seen as an electrical potential, aka voltage, within the material&lt;/p&gt;

&lt;p&gt;
&lt;img margin-top=&quot;20px&quot; width=&quot;100%&quot; src=&quot;/assets/making-a-transistor/pn-junction.png&quot; /&gt;
&lt;/p&gt;
&lt;span style=&quot;font-size:10pt&quot;&gt;https://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Pn-junction-equilibrium-graphs.png&lt;/span&gt;

&lt;p&gt; ---------------- &lt;/p&gt;

&lt;p&gt;What happens if we try to put electricity though it. 

&lt;p&gt;First, focus on voltage. Don't worry about current. When you put + on the p-type side it will attract the electrons back into the n-type and if you put electrons on the p-type it will push away the electrons / attached the holes. &lt;/p&gt;

&lt;p&gt;This causes the number of electrons that are in the other region. Making the voltage to cross the region less. This is what happens when it allows the current to flow. If we change the direction and put the electrons on the n-type. &lt;/p&gt;

&lt;p&gt;It will push away the electrons towards the holes and putting + on the p-type will attract the electrons farther in. This increases the number of electrons in the other region increasing the voltage needed to overcome in the materials. Now it is very difficult for the current to move, it would have to overcome the entire region voltage.&lt;/p&gt;

&lt;p&gt;Try out the slider below, if you see electricity can only go one direction. We just made an &lt;b&gt;electrical diode&lt;/b&gt;!&lt;/p&gt;

&lt;p&gt;
&lt;svg viewBox=&quot;0 0 480 300&quot; width=&quot;100%&quot; id=&quot;svgDiode&quot;&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;30px&quot; y=&quot;20px&quot; fill=&quot;#1070CA&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;230px&quot; y=&quot;20px&quot; fill=&quot;#F7D154&quot; /&gt;
  &lt;rect id=&quot;svgDiode_diffusionArea&quot; width=&quot;40px&quot; height=&quot;140px&quot; x=&quot;210px&quot; y=&quot;20px&quot; fill=&quot;white&quot; opacity=&quot;0.5&quot; /&gt;
  &lt;circle r=&quot;5px&quot; cx=&quot;30px&quot; cy=&quot;90px&quot; fill=&quot;black&quot; /&gt;
  &lt;circle r=&quot;5px&quot; cx=&quot;430px&quot; cy=&quot;90px&quot; fill=&quot;black&quot; /&gt;
  &lt;polyline points=&quot;30,90 10,90 10,240 225,240&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;polyline points=&quot;430,90 450,90 450,240 235,240&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;polyline id=&quot;svgDiode_leftBattery&quot; points=&quot;225,260 225,220&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;polyline id=&quot;svgDiode_rightBattery&quot; points=&quot;235,250 235,230&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;text x=&quot;215&quot; y=&quot;280&quot; id=&quot;svgDiode_text&quot;&gt;0.1V&lt;/text&gt;
&lt;/svg&gt;
&lt;/p&gt;

 &lt;input type=&quot;range&quot; min=&quot;-5&quot; max=&quot;5&quot; value=&quot;-0.1&quot; step=&quot;0.1&quot; class=&quot;slider&quot; id=&quot;myRange&quot; /&gt;

 &lt;script&gt;
    let slider = document.getElementById(&quot;myRange&quot;);
    let voltage = document.getElementById(&quot;svgDiode_text&quot;)
    slider.oninput = () =&gt; {
      voltage.innerHTML = Math.abs(slider.value) + &quot; V&quot;
      updateBatteryDirection(slider.value)
      updateDiffusionRegion(slider.value)
    }

    const updateBatteryDirection = (value) =&gt; {
      let leftBattery = document.getElementById(&quot;svgDiode_leftBattery&quot;)
      let rightBattery = document.getElementById(&quot;svgDiode_rightBattery&quot;)
      if(value &lt; 0){
        leftBattery.setAttribute('points','225,260 225,220')
        rightBattery.setAttribute('points','235,250 235,230')
      } else {
        leftBattery.setAttribute('points','225,250 225,230')
        rightBattery.setAttribute('points','235,260 235,220')
      } 
    }

    const updateDiffusionRegion = (value) =&gt; {
      let diffusionArea = document.getElementById(&quot;svgDiode_diffusionArea&quot;)
      
      diffusionArea.setAttribute('x', 28.5 * value + 210 )
      diffusionArea.setAttribute('width', -57.14 * value + 40)
      // 0.7 x = 230 width = 0
      // 0   x = 210 width = 40
    }

 &lt;/script&gt;

&lt;p&gt; When you try to push electrons to go backwards, the NP junction pushes back at the same but opposite potential. &lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;Okay, now the MOSFET part.&lt;/p&gt;

&lt;p&gt;If you put another n-type material infront of the diode you get a material that doesn't flow any electrity and isn't useful.


&lt;svg viewBox=&quot;0 0 680 300&quot; width=&quot;100%&quot; id=&quot;svgTransistor&quot;&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;30px&quot; y=&quot;20px&quot; fill=&quot;#F7D154&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;230px&quot; y=&quot;20px&quot; fill=&quot;#1070CA&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;430px&quot; y=&quot;20px&quot; fill=&quot;#F7D154&quot; /&gt;
  &lt;rect id=&quot;svgTransistor_diffusionArea&quot; width=&quot;40px&quot; height=&quot;140px&quot; x=&quot;210px&quot; y=&quot;20px&quot; fill=&quot;white&quot; opacity=&quot;0.5&quot; /&gt;
  &lt;rect id=&quot;svgTransistor_diffusionArea2&quot; width=&quot;40px&quot; height=&quot;140px&quot; x=&quot;410px&quot; y=&quot;20px&quot; fill=&quot;white&quot; opacity=&quot;0.5&quot; /&gt;
  &lt;circle r=&quot;5px&quot; cx=&quot;30px&quot; cy=&quot;90px&quot; fill=&quot;black&quot; /&gt;
  &lt;circle r=&quot;5px&quot; cx=&quot;630px&quot; cy=&quot;90px&quot; fill=&quot;black&quot; /&gt;
  &lt;polyline points=&quot;30,90 10,90 10,240 225,240&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;polyline points=&quot;630,90 650,90 650,240 235,240&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;polyline id=&quot;svgTransistor_leftBattery&quot; points=&quot;225,260 225,220&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;polyline id=&quot;svgTransistor_rightBattery&quot; points=&quot;235,250 235,230&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;text x=&quot;215&quot; y=&quot;280&quot; id=&quot;svgTransistor_text&quot;&gt;0.1V&lt;/text&gt;
&lt;/svg&gt;
 
 &lt;input type=&quot;range&quot; min=&quot;-5&quot; max=&quot;5&quot; value=&quot;0&quot; step=&quot;0.1&quot; class=&quot;slider&quot; id=&quot;transistor_myRange&quot; /&gt;
 
  &lt;script&gt; 
    let bslider = document.getElementById(&quot;transistor_myRange&quot;);
    let bvoltage = document.getElementById(&quot;svgTransistor_text&quot;)
    bslider.oninput = () =&gt; {
      bvoltage.innerHTML = Math.abs(bslider.value) + &quot; V&quot;
      bupdateBatteryDirection(bslider.value)
      bupdateDiffusionRegion(bslider.value)
      bupdateDiffusionRegion2(bslider.value)
    }
 
    const bupdateBatteryDirection = (value) =&gt; {
      let leftBattery = document.getElementById(&quot;svgTransistor_leftBattery&quot;)
      let rightBattery = document.getElementById(&quot;svgTransistor_rightBattery&quot;)
      if(value &gt; 0){
        leftBattery.setAttribute('points','225,260 225,220')
        rightBattery.setAttribute('points','235,250 235,230')
      } else {
  leftBattery.setAttribute('points','225,250 225,230')
        rightBattery.setAttribute('points','235,260 235,220')
      } 
    }

    const bupdateDiffusionRegion = (value) =&gt; {
      let diffusionArea = document.getElementById(&quot;svgTransistor_diffusionArea&quot;)
      
      diffusionArea.setAttribute('x', 28.5 * value + 210 )
      diffusionArea.setAttribute('width', -57.14 * value + 40)
      // 0.7 x = 230 width = 0
      // 0   x = 210 width = 40
    }

 const bupdateDiffusionRegion2 = (value) =&gt; {
      let diffusionArea = document.getElementById(&quot;svgTransistor_diffusionArea2&quot;)
      
      diffusionArea.setAttribute('x', -28.5 * value + 410 )
      diffusionArea.setAttribute('width', 57.14 * value + 40)

}

  &lt;/script&gt;




&lt;p&gt;Put a connector on the base. But not directly on the base but close enough that the magnetic field effects the material but electrons moving between is not possible. Usally an Oxide.

&lt;p&gt;Aside: this is how the MOSFET = Metal-Oxide-Silicon Field-Effect Transistor gets it's name  

&lt;p&gt;Now when you apply a voltage to the base connected the the p-type it attracts the electrons close to the connection to the gate. And when enough electrons are near the top.&lt;/p&gt;



&lt;button onclick=&quot;toggleMOSFET()&quot;&gt; Toggle &lt;/button&gt;

&lt;span&gt; Status: &lt;/span&gt;
&lt;span id=&quot;MOSFET_status&quot; style=&quot;color:green&quot;&gt;ON&lt;/span&gt;

&lt;p&gt;
&lt;svg viewBox=&quot;0 0 720 400&quot; width=&quot;100%&quot; id=&quot;svgMOSFET&quot;&gt;
  &lt;rect width=&quot;200&quot; height=&quot;15&quot; x=&quot;230&quot; y=&quot;140&quot; fill=&quot;black&quot; /&gt;
  &lt;polyline points=&quot;330,140 330,0&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;30px&quot; y=&quot;170px&quot; fill=&quot;#F7D154&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;230px&quot; y=&quot;170px&quot; fill=&quot;#1070CA&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;430px&quot; y=&quot;170px&quot; fill=&quot;#F7D154&quot; /&gt;
  &lt;rect id=&quot;svgMOSFET_diffusionArea&quot; width=&quot;200px&quot; height=&quot;20px&quot; x=&quot;230px&quot; y=&quot;170px&quot; fill=&quot;white&quot; opacity=&quot;0.5&quot; /&gt;
  &lt;rect id=&quot;svgMOSFET_diffusionArea2&quot; width=&quot;200px&quot; height=&quot;100px&quot; x=&quot;230px&quot; y=&quot;170px&quot; fill=&quot;white&quot; opacity=&quot;0.5&quot; /&gt;
  
&lt;/svg&gt;
&lt;/p&gt;

 &lt;script&gt; 

    const toggleMOSFET = () =&gt; {
      let status = document.getElementById(&quot;MOSFET_status&quot;);

      let firstLayer = document.getElementById(&quot;svgMOSFET_diffusionArea&quot;)
      let secondLayer = document.getElementById(&quot;svgMOSFET_diffusionArea2&quot;)

      if(status.innerHTML === &quot;ON&quot;){
        firstLayer.setAttribute('fill','none')
        secondLayer.setAttribute('fill','none')
        status.innerHTML = 'OFF'
        status.setAttribute('style','color: red')
      } else {
        firstLayer.setAttribute('fill','white')
        secondLayer.setAttribute('fill','white')
        status.innerHTML = 'ON'
        status.setAttribute('style','color: green')
      }
    }

 &lt;/script&gt;


&lt;p&gt;This breaks the np junction. Now that there is this base most the voltage potential is from the top to the bottom and not left to right. The electrons can move with little trouble&lt;/p&gt;

&lt;p&gt;In channel is formed that allows electrons to easily pass. There is no - and + difference to pass. Electrons can pass through without a change from - and +. This is called an n-channel.&lt;/p&gt;

&lt;p&gt;This was all theory, in 2 weeks I will be posting part 2 where we will start to build a transistor from rocks&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update: &lt;/b&gt;&lt;a href=&quot;/making-a-transistor-from-scratch-part-2.html&quot;&gt;Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading, this type of article was new for me. If you enjoyed it please share it. Also I'm now on Twitter, follow me &lt;a href=&quot;http://twitter.com/lazydancr&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>