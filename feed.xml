<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-04-08T16:02:47-04:00</updated><id>/feed.xml</id><title type="html">James Pucula</title><entry><title type="html">Reading List</title><link href="/reading-list.html" rel="alternate" type="text/html" title="Reading List" /><published>2020-01-01T00:00:00-05:00</published><updated>2020-01-01T00:00:00-05:00</updated><id>/reading-list</id><content type="html" xml:base="/reading-list.html">&lt;p&gt;In 2019, I made a New Year’s resolution to write a website post once a month and read 35 books. I didn’t complete either. Below is a review of the books I read last year and my thoughts of them.&lt;/p&gt;

&lt;h2 id=&quot;infinite-jest-by-david-foster-wallace&quot;&gt;Infinite Jest by David Foster Wallace&lt;/h2&gt;

&lt;p&gt;I would not recommend you read this book, unless you want to. In school, I didn’t read many books, Sparknotes was my friend. Part of me is glad to have finished this book due to the size alone, but that is a horrible reason to read a book. This book won awards in 2009. And I thought it would be good. It definitely changed the way I read. By now I have forgotten most of the book and I hope the good stuff is what remains.&lt;/p&gt;

&lt;p&gt;The book is not a single cohesive story, it’s a mixture of a dozen half-complete ones. The stories circle around the theme of addiction. There is also a lot of unrelated funny events happening. I found the non-linearly of the book interesting, it really separates the view point from the book and the actual events of the story. It made you think about where the words you were reading exists in the context of where and when it occurred.&lt;/p&gt;

&lt;p&gt;Even with the size of the book, the entire story is even larger. There is a whole other side which occurs but is not written down and is implied throughout the book. It is like a story that reads backwards, where you start seeing the story lines come together and it all makes sense in the end but in this case it doesn’t reach a conclusion.&lt;/p&gt;

&lt;p&gt;To add to the disorientation, the book has many references which you need to read the footnotes. The footnotes are long enough to warrant their own footnotes. I also had to use an Infinite Jest dictionary online. I had the book on my e-reader, the physical book for the footnotes and the laptop open for the dictionary at the same time. It actively makes me think that the author did not want you to understand what was going on so you would put your own story together. Below is except from the Infinite Jest dictionary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tyrolean hats:&lt;/strong&gt; The Tyrolean hat, named after the region of Tyrol, is associated with the Austrian Alps. Tyrolean hats have a cord wrapped around the base of the crown and a feather or brush on the side as trim.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;H.E.W.:&lt;/strong&gt;the U.S. Department of Health, Education, and Welfare&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rife:&lt;/strong&gt; abounding&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Eminent nondomain:&lt;/strong&gt; “Eminent domain” is the right of the government to seize private property to serve a greater good. This would be the opposite, i.e., the right of the government to divest or cede private property to serve the greater good.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;bien sûr:&lt;/strong&gt; French: of course&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;U.S.O.:&lt;/strong&gt; United States Organizations, an organization dedicated to entertaining troops at war&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://infinitejest.wallacewiki.com/david-foster-wallace/index.php?title=Infinite_Jest_Page_by_Page&quot;&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I found many quotes of the book, don’t give a good taste of what the book is about. Below is an except from a main character, Gately.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;“I think there must be probably different types of suicides. I'm not one of the
self-hating ones. The type of like &quot;I'm shit and the world'd be better off without
poor me&quot; type that says that but also imagines what everybody'll say at their
funeral. I've met types like that on wards.
Poor-me-I-hate-me-punish-me-come-to-my-funeral. Then they show you a 20 X 25 glossy
of their dead cat. It's all self-pity bullshit. It's bullshit. I didn't have any
special grudges. I didn't fail an exam or get dumped by anybody. All these types.
Hurt themselves. I didn't want to especially hurt myself. Or like punish. I don't
hate myself. I just wanted out. I didn't want to play anymore is all. I wanted to
just stop being conscious. I'm a whole different type. I wanted to stop feeling this
way. If I could have just put myself in a really long coma I would have done that.
Or given myself shock I would have done that. Instead.” 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;merchants-of-doubt-by-naomi-oreskes&quot;&gt;Merchants of Doubt by Naomi Oreskes&lt;/h2&gt;

&lt;p&gt;Merchants of Doubt is about people that cast doubt in science towards the public. An example given in the book is the correlation between smoking and cancer. This correlation was proven in 1929 in Germany, re-proven in 1950 in the UK and was included in a Surgeon General’s Report in the United States in 1964.  Tobacco companies claimed that these study lacked credibility and health authorities sided with these claims until 1998. One of the main arguments the “merchants of doubt” used was that a perfect relation could not be found, not all people that smoke got cancer. There is so much room for interpretation and bias in gathering a dataset. Everything is relative and we can trick people and even ourselves.&lt;/p&gt;

&lt;p&gt;I learned a lot about how political movements work and why we think they occur. A small group of people that really care are much more powerful than a large group of people who only have a preference and not a strong belief.&lt;/p&gt;

&lt;p&gt;I found refreshing, is the book didn’t portray these “Merchants of Doubt” as evil. The Merchants of Doubt legitimately thought they were making the world a better place. It’s unfortunate that they had to name names but I think it helped solidify the statements, making it more grounded. A nuclear physicist, with the credentials to match, believed that cigarettes didn’t cause cancer and pushing for more research, when what was needed was to act at that moment.&lt;/p&gt;

&lt;p&gt;There seemed to be a common themes in the opposing view. That more research is needed. People believe that government intervention is not always the best method. Before I thought it was money that motivated these people from large companies that would appose this need for government regulation.&lt;/p&gt;

&lt;p&gt;Another topic brought up in the book, is there a need for equal sides. This was something that I never thought of. Does every decision have two equal sides? As an example for climate change, you could have a member of the scientific community saying that climate change will have long term effects and then the opposition says they want representation and believing there will be no long term effects. When looking from it from someone totally new to the topic, it looks like the scientific community is split. Even with the good indention of the news company. Have a fair representation should not be equal but should align with the consenseis. To compound the issue, science is full of questions, and they don’t try to hide that uncertainty.&lt;/p&gt;

&lt;p&gt;I enjoyed Why We Sleep by Matthew Walker, until I learned that it lied… a lot. The premise of the book is that sleep is good for you, it reduces cancer risk, makes you more alert, makes you live longer. I love my sleep and what was being said made sense and the author has a PhD and many years experience and I thought it was a trusted source.&lt;/p&gt;

&lt;p&gt;From further research it has been found incomplete context was given. In each almost every result the author used the most compelling argument for his case and ignored any information that would have contradicted him. For an example in the part about beauty. The author gives an example. A group was split into 2 one group slept for only 5 hours and the other 8 hours. The result found that when the photos of them were rated. The participates with 8 hours were labeled more beautiful and healthier than the participants with only 5 hours of sleep. What the author failed to mention was at what time the photos were taken. In the study, the participants who slept 8 hours had their picture taken 7 hours after waking where the participants who slept 5 hours had their picture taken 31 hours after they awoke.&lt;/p&gt;

&lt;p&gt;The author of this book lied by leaving out crucial information and context. And this isn’t isolated but is basically the entire book. This book a learned about how to lie without giving false facts. And it showed what was being done in the merchants of doubt. There are facts, the context to the facts and how you present then, adding irrelevant information and leaving out information. It made me change how I think about scientific results.&lt;/p&gt;

&lt;p&gt;This didn’t really fit in the review, but Hank Green’s critic of someone apposing climate change and how masterful you can skew a topic with language. &lt;a href=&quot;https://www.youtube.com/watch?v=_Es4gG9xVf8&quot;&gt;Youtube&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-rest&quot;&gt;The Rest&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Consider Phlebas by Iain Banks&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Loved the comparison of war in space being like the transition from hand-to-hand to the introduction of guns&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Restaurant at the End of the Universe by Douglas Adams&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Adams bizarrely introspective books which makes fun of and expands science fiction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Remains of the Day by Kazuo Ishiguro&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Amazon’s CEO favorite book. I feel like I didn’t get the intended effect of the book. I will have to return to it later.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Handmaids Tale by Margaret Atwood&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Felt like a personal diary from a person in dystopian future. You only learn about the universe overtime. I would recommend reading.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How to Fail at Almost Everything and Still Win Big by Scott Adams&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Although not advice I would take, the story behind Dilbert and his perspective was interesting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;100 Years of Solitude Gabriel García Márquez&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I wanted to enjoy this book more. It mixed interesting elements of the natural and unnatural.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Thinking in Systems: A Primer by Donella Meadows&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Very much an introduction. I don’t remember much of this book.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Philoshopy of Software Design by John Ousterhout&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I wish this book was longer. I learned about having deep modules and simple interfaces, how to define complexity as dependency and obscurity and also the strategic mindset. He also gave “red flags” to see in your software.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2018&quot;&gt;2018&lt;/h1&gt;

&lt;p&gt;I read 34 books in 2018, not 52 as my goal, but this year was most books I ever read.&lt;/p&gt;

&lt;p&gt;I read many interesting biographies of Howard Hughes, Viktor Frankl, Sam Walton, The Wright Brothers, Paul Erdos.  I enjoyed non-fiction from Code, Fabless, Ant Encounters, Enlightenment Now, Code Complete 2, Debt: The first 5000 years, Energy and Civilization, Naked Economics and the Goal and Finishing off the Foundation series.&lt;/p&gt;

&lt;p&gt;My favorite book of this year was Do Androids Dream of Electric Sheep? which was made into a movie called Bladerunner. I enjoyed the bizarre atmosphere of the book and its theme of questioning what is real and does it matter&lt;/p&gt;

&lt;li&gt;&lt;b&gt;Prelude to Foundation&lt;/b&gt; &lt;i&gt;by Isaac Asimov&lt;/i&gt;&lt;p&gt;
The story follows Hari Seldon in the creation
of pychohistory while providing more information of Trantor, the center
of the Empire.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;What Money Can't Buy&lt;/b&gt; &lt;i&gt;by Michael J. Sandel&lt;/i&gt;&lt;p&gt;
This book is about the moral questions of buying and selling stuff.
Should we bet on death (life insurance), paying kids for good
grades and classroom advertising.
The book showed how creating a market changed the morally of each.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Forward the Foundation&lt;/b&gt; &lt;i&gt;by Isaac Asimov&lt;/i&gt;&lt;p&gt;
With the further look into the First Foundation and the creation of the Second Foundation.
We were able to get more detail of the First Foundation and the Second Foundation. I loved
the Foundation Series and would recommend to read
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;On Writing&lt;/b&gt; &lt;i&gt; by Stephen King&lt;/i&gt;&lt;p&gt;
1. Tell the Truth, if in your writing you are holding back then you can not create a connection to the reader.
2. Don't use adverbs or the passive tense, I will try my best.
3. To be a good writer, you need to read a lot.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Code&lt;/b&gt; &lt;i&gt; by Charles Petzold&lt;/i&gt;&lt;p&gt;
After the first few chapters, I expected this book to a math book on the
theory of programming and a part of it was. The majority of this book was practical and went on how a computer
is designed and built from telephone relays to a high level computer language. This helps take the &quot;magic&quot; out of computers.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Fabless&lt;/b&gt; &lt;i&gt;by Paul McLellan&lt;/i&gt;&lt;p&gt;
An interesting book on the semiconductor industry. When starting this
book I was expecting more deep dive into the technical aspects of the industry but was more of a history book.
I felt some of the &quot;In there own words&quot; sections where just repeating
what the author said in the chapter leading up to the excerpt.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Howard Hughes&lt;/b&gt; &lt;i&gt;by Donald L. Barlett and James B. Steele&lt;/i&gt;&lt;p&gt;
I didn't know anything about Howard Hughes before reading this book.
It is interesting how much he did with this life being a movie producer, record breaking pilot, airplane designer
to name a few. This book had so much detail on Hugh's actions and it was an interesting perspective from Hugh's associates
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Do Androids Dream of Electric Sheep?&lt;/b&gt; &lt;i&gt;by Philip K. Dick&lt;/i&gt;&lt;p&gt;
The book creates an atmosphere of post-apocalyptic 2020 San Francisco which I seem to get lost in.
It is the book's 50th anniversary. It is interesting how it seems futuristic still. It brings up the question
what is the difference between an android and a human.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Mythical Man-Month&lt;/b&gt; &lt;i&gt;by Fred Brooks&lt;/i&gt;&lt;p&gt;
This book came out 40 years ago, other then the talk of mainframe computers, I feel this book has held up its
principles still. The central principle being, adding manpower to a late software project makes it later.
Maybe this could be we greatly underestimate the time needed to learn a new system and the time that is
added when there is more people that need to be informed.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Ant Encounters&lt;/b&gt; &lt;i&gt;by Deborah Gordon&lt;/i&gt;&lt;p&gt;
There is so much information about ants and this book seems to be an introduction to the wider field of how
living things interact. It is interesting that with no central control, ants are able to live though the rate
in which they interact and the pattern of their encounters. I would recommend this book, it was a nice quick read.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Man in the High Castle&lt;/b&gt; &lt;i&gt;by Philip K. Dick&lt;/i&gt;&lt;p&gt;
This book looks at what would have happened if World War II ended differently. It took some time to reorient
oneself each &quot;jump&quot; in the book. I really enjoyed this book, and like Do Androids Dream of Electric Sheep looked agian at what is real and what is fake,
is there any difference from the two and does it matter.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Man's Search for Meaning&lt;/b&gt; &lt;i&gt;by Viktor Frankl&lt;/i&gt;&lt;p&gt;
Viktor Frankl writes about experiences as an Auschwitz concentration camp inmate during World War II. This was an emotional
book to read, when looking at what happened in the concentration camps. Frankl looks at this from a phycologist perspective
and the later section of the books presents his psychotherapeutic method. I would recommend this book
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Hard Thing About Hard Things&lt;/b&gt; &lt;i&gt;by Ben Horowitz&lt;/i&gt;&lt;p&gt;
This book is about Ben Horowitz experiences as a CEO of many startup companies and he outlines his experiences.
This I would
not catergorize as a business book and closer to an auto-biography. It offers an in-depth look in to the world of fast
growing technology companies.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Evicted&lt;/b&gt; &lt;i&gt;by Matthew Desmond&lt;/i&gt;&lt;p&gt;
The book follows half a dozen families and their stuggles.
At the same time, it shows the larger picture with the facts of evictions in the usa and the impact it has.
It was enlightining to have the landlord's perpective of this enviroment, bringing up the discussion of explotation and
housing being a fundamental human need.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Made in America&lt;/b&gt; &lt;i&gt;by Sam Walton&lt;/i&gt;&lt;p&gt;
Learning about Sam Walton and his obsession with retail, from his first stores to the discount stores in
rural america. He was extremely competitive and trying out things that haven't be done before. At the same time
taking best practices from his competitors.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Enlightenment Now&lt;/b&gt; &lt;i&gt;by Steven Pinker&lt;/i&gt;&lt;p&gt;
This was a long book. I read Part I and II but had to abandon it half way though Part III. This book made me think
differently about how well we are doing in the world. I really enjoyed the chapter on climate change, in how
Pinker goes over how we have taken the news and how it has also been a political issue and how there are divided.
It was also interesting to see how the news warps our image of the world and he re-enforces the availiblity bias
and confirmation bias.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;A Wrinkle in Time&lt;/b&gt; &lt;i&gt;by Madeleine L'Engle&lt;/i&gt;&lt;p&gt;
A fun weird little story
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Code Complete 2&lt;/b&gt; &lt;i&gt;by Steve McConnell&lt;/i&gt;&lt;p&gt;
I have been focusing to improving my programming skills. From reviews online, I heard this was the textbook for programmers.
I believe it lived up to the hype, many guidelines it recommends I use everyday. I liked that this book went into detail of many
elements of project management which can be used out of programming.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Fight Club&lt;/b&gt; &lt;i&gt;Chuck Palahniuk&lt;/i&gt;&lt;p&gt;
It was a very interesting analysis of the human psychology. The movie follows the books very closely expect
for ending which leave the movie and book with different a message at the end of the book.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Le Petit Nicolas&lt;/b&gt; &lt;i&gt;René Goscinny&lt;/i&gt;&lt;p&gt;
Un livre de jeunesse que j'ai lu pour améliorer mon français.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;The Subtle Art of Not Giving A F*ck&lt;/b&gt; &lt;i&gt;by Mark Manson&lt;/i&gt;&lt;p&gt;
It is an okay book. My  favorite part of the book is how when
you remove actions and challenges each of us has core values and you have to strive for maintaining these values
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Debt: The First 5000 Years&lt;/b&gt; &lt;i&gt;by David Graeber&lt;/i&gt;&lt;p&gt;
This was a insightful book that brought up many new ideas. The barter economy
never existed. Describing the market economy and human economy.
This book was lonng and read like a textbook. It
provides a very detailed account of the introduction of money and worth and the different systems that were used until
today.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;I, Robot&lt;/b&gt; &lt;i&gt;by Isaac Asimov&lt;/i&gt;&lt;p&gt;
I, Robot is a  story about when robots came be able to talk and perform a larger variety of tasks. Each chapter seemed to introduce
a new and exciting problem which made you think about the ethics of robots and how they relate to people.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Fooled by Randomness&lt;/b&gt; &lt;i&gt;by Nassim Nicholas Taleb&lt;/i&gt;&lt;p&gt;
This book was a great book to look at how bad humans are at guessing the future.
In addition the book looked at the bias everyone has and how they apply in the real world
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Sex, Drugs, and Cocoa Puffs&lt;/b&gt; &lt;i&gt;by Chuck Klosterman&lt;/i&gt;&lt;p&gt;
A book of eighteen essays. The book looks into pop culture and how it affects us.
The book was released 15 years ago and makes a lot of references I've heard of; The Real World, Billy Joel, Saved by the bell but I didn't experience them like the reader.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Le Petit Prince&lt;/b&gt; &lt;i&gt;by Antoine de Saint-Exupéry&lt;/i&gt;&lt;p&gt;
C'est un histoire bizzare. Je pense que je le devrai lire en anglais. J'ai lu pour améliorer mon français.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Wright Brothers&lt;/b&gt; &lt;i&gt;by David McCullough&lt;/i&gt;&lt;p&gt;
An awesome history of the birth of flight. It is interesting to see the contrast between langley with large goveremnt spending and the wright brothers who made money at the bike shop to pay for the development. The Wright brothers were not considered by the US goverenment when they were look to sell there plane.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Reality Is Not What It Seems&lt;/b&gt; &lt;i&gt;by Carlo Rovelli&lt;/i&gt;&lt;p&gt;
This book went through the history of physics from Greek philosophers to present day. It has been an intersting hearing a simple explaination of modern physics - With two basic theories of quantum mechanics and general relativitity and the attempt to combine these incompatible theories. This book introducted loop quantum gravitiy as the new leading contender.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Seveneves&lt;/b&gt; &lt;i&gt;by Neal Stephenson&lt;/i&gt;&lt;p&gt;
The book is about the what would happen if the moon suddenly split apart. This book felt like 2 books, with the first being a scifi novel and the second being a drama. I enjoyed the first half, the second seemed to drag on a bit. It was an interesting thought experiment and covered a large variety of issues that could occur.
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Energy and Civilization&lt;/b&gt; &lt;i&gt;by Vaclav Smil&lt;/i&gt;&lt;p&gt;
The books puts together a big history of society and its relationship with energy and technology. I enjoyed looking at the energy perspective in biology and the benefits of bipedalism and why we have 2 feet. In addition, agriculture and how the calorie of food per hours of work is an important heuristic for a population density.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Never Split The Difference&lt;/b&gt; &lt;i&gt;by Chris Voss&lt;/i&gt;&lt;p&gt;
I try to avoid most business type books, but this book exceeded my expectations. I enjoyed reading Chris Voss's experience of being a hostage negotiator and hearing how he learnt all of these lessons in the field. The points he shows are actionable and feel very achievable. 
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Man Who Loved Only Numbers&lt;/b&gt; &lt;i&gt;by Paul Hoffman&lt;/i&gt;&lt;p&gt;
A biography of the famous mathematician Paul Erdos. I really enjoyed this book and hear about Erdos's life. I also enjoyed hearing about other mathematicians in the book such as Ronald Graham and Carl Friedrich Gauss
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Naked Economics&lt;/b&gt; &lt;i&gt;by Charles Wheelan&lt;/i&gt;&lt;p&gt;
A nice introduction to economic thinking. I found the part of determining what makes an economy rich an interesting concept.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Goal&lt;/b&gt; &lt;i&gt;by Eliyahu Goldratt&lt;/i&gt;&lt;p&gt;
This was a piece of fiction where a main character is trying to save his plant. It is also a business book to run an efficient business. I have heard a lot about this book and was glad to read it. The main theory of the book is reduce your bottlenecks.
&lt;/p&gt;
&lt;/li&gt;

&lt;p&gt;Thanks for reading&lt;/p&gt;</content><author><name></name></author><summary type="html">In 2019, I made a New Year’s resolution to write a website post once a month and read 35 books. I didn’t complete either. Below is a review of the books I read last year and my thoughts of them.</summary></entry><entry><title type="html">Advent Of Code</title><link href="/advent-of-code.html" rel="alternate" type="text/html" title="Advent Of Code" /><published>2019-12-01T00:00:00-05:00</published><updated>2019-12-01T00:00:00-05:00</updated><id>/advent-of-code</id><content type="html" xml:base="/advent-of-code.html">&lt;h2 id=&quot;2019&quot;&gt;2019&lt;/h2&gt;

&lt;p&gt;Python solutions to the daily coding puzzles, explained.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I first participated in Advent of Code in 2018. I enjoyed working on the challenges and I learned a lot. The goal of the advent of code is to try to get on the leaderboard which is the fastest people to complete the problem when it is released at midnight.&lt;/p&gt;

&lt;p&gt;Last year my goal was to complete all the problems. This year I will focus on writing clean code and writing more about my experience.&lt;/p&gt;

&lt;p&gt;Each code snippet is complete, runnable program. I have included my input for each day. While you are in the directory for the day (ex. /Day-01) you can run the code line this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python solution.py input.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also find all of these solutions on Github: &lt;a href=&quot;https://github.com/lazydancer/Advent-of-Code-2019&quot;&gt;lazydancer/Advent-of-Code-2019&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Table of Contents&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;Day 1: The Tyranny of the Rocket Equation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Day 2: 1202 Program Alarm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Day 3: Crossed Wires&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Day 4: Secure Container&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Day 5: Sunny with a Chance of Asteroids&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Day 6: Universal Orbit Map&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Day 7: Amplification Circuit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Day 8: Space Image Format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Day 9: Sensor Boost&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#10&quot;&gt;Day 10: Monitoring Station&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;1&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-1-the-tyranny-of-the-rocket-equation&quot;&gt;Day 1: The Tyranny of the Rocket Equation&lt;/h2&gt;

&lt;p&gt;For Part 1, we simply need to divide each module weight by 3 and substact 2. The only thing in my code that is unusally is the ‘//’ which is an integer divide. It acts as a round down function.&lt;/p&gt;

&lt;p&gt;For Part 2, we need to account for the extra weight of the fuel. This is done with a while loop where it looks for values which would add more fuel. When the fuel get less than 8.9999… the result will be 0.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fileinput&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;part_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;module_weights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fuel_calc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fuel_calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module_weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;	

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;part_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;module_weights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate_fuel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module_weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculate_fuel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module_weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;total_fuel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module_weight&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;total_fuel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_fuel&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 1 is'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 3188480
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 2 is'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 4779847
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The tyranny of the rocket equation relates to the ideal rocket equation. Which is interesting to derive. We have the follow the rule of conservation of momentum where the momentum in a closed system needs to remain constant.&lt;/p&gt;

&lt;div style=&quot;margin: 0 auto; max-width: 405px&quot;&gt;
&lt;img src=&quot;../assets/advent-of-code-2019-solutions/Var_mass_system.svg&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;All this simplifies to…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mdv = v_exhaust * dm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This makes sense the change in the momentum of the ship is the change in mass of the ship times the exhaust speed&lt;/p&gt;

&lt;p&gt;Rearranging and integrating both sides with respect to time and knowing 1/x integrates to ln(x) and ln(a) - ln(b) = ln(a/b). Finds the ideal rocket equation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;v_final - v_inital = v-exhaust * ln(m_inital / m_final)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;2&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-2-1202-program-alarm&quot;&gt;Day 2: 1202 Program Alarm&lt;/h2&gt;

&lt;p&gt;For part 1, we need a run program which would set the pointer every 4 numbers. This is done with a simple for loop but not robust if another size of jump is needed.&lt;/p&gt;

&lt;p&gt;For part 2, we iterate over the program to find when a result is a desired number. The inputs are changed till the result is given. With only 100 possible values for the two. Leads to only 10,000 combinations and since order matters we look at the permutations using the builtin itertools module.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fileinput&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 1 is'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 4930687
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 2 is'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19690720&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 5335
&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noun&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_opcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_opcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;3&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-3-crossed-wires&quot;&gt;Day 3: Crossed Wires&lt;/h2&gt;

&lt;p&gt;This one was done in Rust&lt;/p&gt;

&lt;p&gt;For Part 1, we can find the path in which each wire takes, creating a vector of locations. Finding where the two wires interset is looking at where both wire end at a location. We can use a set data type to find the union, in this case a HashSet finding an intersection.&lt;/p&gt;

&lt;p&gt;For Part 2, we look for the shortest manhattan distance along the path of the wires.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;nf&quot;&gt;.expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Something went wrong reading the file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collisions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions_0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positions_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closest_collision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collisions&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Part One: {:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closest_collision&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quickest_collision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collisions&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Part Two: {:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quickest_collision&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'U'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'L'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.flat_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div id=&quot;4&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-4-secure-container&quot;&gt;Day 4: Secure Container&lt;/h2&gt;

&lt;p&gt;Part 1, we can find adjancent cells by taking a copy, shifting it by one and comparing against the original.&lt;/p&gt;

&lt;p&gt;Part 2, we can use a BTreeMap and count all of the numbers given finding if any are equal to 2.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;btree_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BTreeMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;only_doubles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;BTreeMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.or_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;adjancent_chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars_a&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;chars_a&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars_b&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;always_increase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars_a&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;chars_a&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars_b&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_1_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;387638&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;919123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;adjancent_chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;always_increase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;part_1_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_1_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;//466&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_2_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;387638&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;919123&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;adjancent_chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;always_increase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;only_doubles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;part_2_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:?}: {:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_2_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_2_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;//292&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;5&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-5-sunny-with-a-chance-of-asteroids&quot;&gt;Day 5: Sunny with a Chance of Asteroids&lt;/h2&gt;

&lt;p&gt;Back to python&lt;/p&gt;

&lt;p&gt;Part 1, Using the old code from day 2, we had to introduce a new functions like input and ouput. The INPUT variable I made a global constant&lt;/p&gt;

&lt;p&gt;Part 2, even more functions were added and we needed to separate the pointer from the for loop and introduced more functions&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fileinput&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;INPUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INPUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 1 is'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 4930687
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;INPUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 2 is'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 5335
&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;old_pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_opcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_opcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;third&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;first_parameter_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;second_parameter_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_parameter_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_parameter_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INPUT&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TEST diagnotic program output:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;third&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;6&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-6-universal-orbit-map&quot;&gt;Day 6: Universal Orbit Map&lt;/h2&gt;

&lt;p&gt;For part 1, we can set up a map which looks at what planet it orbits. For each planet going down the chain to the base. Finding the base is done by taking the differnce between two sets. The ‘guide’ is a hashmap for really quick lookup values&lt;/p&gt;

&lt;p&gt;For part 2, we can find the path of YOU and SAN back to the base element and the paths will be common until a divergent step. Add up the remain elements that aren’t common to find the paths between them.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fileinput&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;')'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# hash guide from planet to lower orbit 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guide&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# should be only one planet that doesn't have a guide value
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 1 is:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 162816
&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Find the descent patterns of YOU and SAN
# Match the first common element
# Add up the above to find the transfer distance - 2
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;you_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'YOU'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;you_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;you_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;san_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'SAN'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;san_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;san_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;diverge_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;san_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;san_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;diverge_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;steps_you&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;you_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diverge_step&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;steps_san&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;san_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diverge_step&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_san&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_you&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 2 is:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;7&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-7-amplification-circuit&quot;&gt;Day 7: Amplification Circuit&lt;/h2&gt;

&lt;p&gt;For part 1, we can use the itertools library and use the permutations function to get the result of the max&lt;/p&gt;

&lt;p&gt;For part 2, I didn’t get it done in the time I had. I think you need to keep the state of the program. I will come back to this, I will try to create a stateful ampifier class&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fileinput&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;highest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_settings&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permutations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phase_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intcode_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;highest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;highest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;highest&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The solution to part 1 is&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;highest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;intcode_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;   
    &lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'100'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ljust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div id=&quot;8&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-8-space-image-format&quot;&gt;Day 8: Space Image Format&lt;/h2&gt;

&lt;p&gt;For part 1, we can split the transmission into different chunks and count the layer with the fews 0 by using the min and count function&lt;/p&gt;

&lt;p&gt;For part 2, we just send to a function which returns 1 or 0 the first layer it sees them&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fileinput&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HEIGHT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;transmission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transmission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fewest_zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The solution to part 1 is:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fewest_zeros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fewest_zeros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'0'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transmission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;9&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-9-sensor-boost&quot;&gt;Day 9: Sensor Boost&lt;/h2&gt;

&lt;p&gt;After debugging for a while, I have left this one where it is. I hope to come back to this challenge&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fileinput&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intcode_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;intcode_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;   
    &lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;


        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Number 6&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div id=&quot;10&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;day-10-monitoring-station&quot;&gt;Day 10: Monitoring Station&lt;/h2&gt;

&lt;p&gt;For part one I selected an asteroid to check if it had the most lines of sight by creating an expanding box from the asteroid and using any asteroids as casting shadows on the ones behind it&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fileinput&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asteroids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileinput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'#'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;asteroids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visible_asteroids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asteroids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asteroids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The solution to part 1 is&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;visible_asteroids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asteroids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;local_asteroids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asteroids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;space_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asteroids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;top_lefts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top_lefts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    
        &lt;span class=&quot;n&quot;&gt;casts_shade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_asteroids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;casts_shade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;shaded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shade_mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;local_asteroids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shaded&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_asteroids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shade_mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;gcd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;shaded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;shaded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shaded&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tl_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl_loc&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tl_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tl_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tl_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tl_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tl_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;2018&quot;&gt;2018&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    !
  -~*~-
   /!\
  /%;@\
 o/@,%\o
 /%;`@,\
o/@'%',\o
'^^^N^^^`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://adventofcode.com/&quot;&gt;Advent of Code&lt;/a&gt; is an annual programming competition to complete 25 challenges in December. It’s a way grow as a programmer, through solving problems and reveiwing others code. In this article I will cover two things I learned about this year and try to convince you to join next years competition.&lt;/p&gt;

&lt;h3 id=&quot;1-assembly-language&quot;&gt;1. Assembly Language&lt;/h3&gt;

&lt;p&gt;I have always be interested in how computers work, &lt;em&gt;see&lt;/em&gt; &lt;a href=&quot;https://pucula.com/notes/making-a-transistor-from-scratch-part-1.html&quot;&gt;building a transistor from scratch&lt;/a&gt;. I have never had the chance to program in assembly. That changed on &lt;a href=&quot;https://adventofcode.com/2018/day/16&quot;&gt;Day 16&lt;/a&gt;, the challenge was to run a new programming language called elf code. Elf code looked almost identical to assembly.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first number is the opcode, which could represent 1 of 16 operations, ‘add’, ‘mul’, ‘mov’. The second and third were inputs and the forth was what register to use for the output.&lt;/p&gt;

&lt;p&gt;First, I wrote the code in python. It turned out way too slow, even with pypy and a better data structure. I got it down to 1/10th of the original but after 3 hours, I stopped it.&lt;/p&gt;

&lt;p&gt;To solve it, you need to watch how the elf code is being executed, find the pattern and simplify the logic. I was curious if this could be completed by running right on the hardware.&lt;/p&gt;

&lt;p&gt;Using an intermeddiate step to C, Below is a snippet of the assembly. ‘;’ is a comment. The ‘l01’, ‘l02’, ‘l03’ and ‘l07’ are labels. For example the first command is jmp l17, which is jump to label l17.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;l17&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;;  L00: goto *jump_table[0+16+1]; //addi 3 16 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;;  L01: reg[1] = 1; //seti 1 2 1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;r12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;;  L02: reg[2] = 1; //seti 1 1 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l03&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;  L03: reg[5] = reg[1] * reg[2]; //mulr 1 2 5&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r12&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;imul&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rbx&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;r15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;r15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r14&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;  L04: reg[5] = reg[5] == reg[4]; //eqrr 5 4 5&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;sete&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;al&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;;  Grab the flag&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;movzx&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;al&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;;  Move the flag to r15 extends with zeros&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;je&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;l07&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;;  L05: goto *jump_table[reg[5] + 5 + 1]; //addr 5 3 3&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;l08&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;;  L06: goto *jump_table[6 + 1 + 1]; //addi 3 1 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;r10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;;  L07: reg[0] = reg[1] + reg[0]; //addr 1 0 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the end the assembly was not fast enough, even being roughly 20x faster than my original python implementation.&lt;/p&gt;

&lt;p&gt;Along the way I learned x86-64 commands, registers, flags and jump commands. I also learned why assembly is not written. This code ran about as fast as the C code that I made but not being portable between different computers and being somewhat hard to follow. Below is the code to write a single character to the screen.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;[value],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r10&lt;/span&gt;     
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;; system call for write&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;; file handle 1 is stdout&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;; address of string to output&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;; number of bytes&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;; invoke operating system to do the write&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;; system call for exit&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;xor&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;; exit code 0&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;syscall&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;; invoke operating system to exit &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All the code can be found on my &lt;a href=&quot;https://github.com/lazydancer/Advent-of-Code-2018/tree/master/Day%2019&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-python-imports&quot;&gt;2. Python Imports&lt;/h3&gt;

&lt;p&gt;Most of the time I avoid python imports, I found the default data types do the job. During these challenges, I have come to love defaultdict, copy, dequeue. Also networkx for building networks and re for regular expressions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;defaultdict&lt;/strong&gt; - Having a set value for when nothing exist is a very useful feature&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;somedict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;somedict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# KeyError
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;someddict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someddict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# print int(), thus 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;copy&lt;/strong&gt; - Because python calls list by reference this is useful to keep things functional&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deepcopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;dequeue&lt;/strong&gt; - A double-ended queue, this is useful for when rotation is needed with a rotate function&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;xrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;networkx&lt;/strong&gt; - This was useful for all types of graph equations. Shortest path was used many times&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;networkx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...adding nodes...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;networkx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortest_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;re&lt;/strong&gt; - This is a very popular library I have tried to avoid it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jamie Zawinski&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now I follow Jeff Atwoods take on &lt;a href=&quot;https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/&quot;&gt;them&lt;/a&gt;. They are amazing but only when you use them sparsely. As an example, the line below grabs the numbers from the a line of text and converts them to integers&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'-?\d+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;During the challenge, I read as much as I coded. Reading other peoples code was enlightening. You saw how they approached the problem and what trade-offs they chose.&lt;/p&gt;

&lt;p&gt;Thank you &lt;a href=&quot;http://was.tl/&quot;&gt;Eric Wastl&lt;/a&gt; for creating advent of code and everybody that shared their solutions online. I learned a lot.&lt;/p&gt;</content><author><name></name></author><summary type="html">2019</summary></entry><entry><title type="html">Pathfinding</title><link href="/pathfinding.html" rel="alternate" type="text/html" title="Pathfinding" /><published>2019-05-30T00:00:00-04:00</published><updated>2019-05-30T00:00:00-04:00</updated><id>/pathfinding</id><content type="html" xml:base="/pathfinding.html">&lt;p&gt;I’m working on a project where I want to connect blocks together using paths. The paths can’t overlap and the algorithm needs to run fast as there are a lot of them.&lt;/p&gt;

&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;../assets/pathfinding/BlockConnect.svg&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;In this post I will show various methods in pathfinding and look at the different trade-offs in speed, memory and “solution idealness” of the different approachs to take when pathfinding.&lt;/p&gt;

&lt;h2 id=&quot;common-elements&quot;&gt;Common Elements&lt;/h2&gt;

&lt;p&gt;Each of the following algorithms require two variables.&lt;/p&gt;

&lt;p&gt;The first is a list of visited locations. I’ll call this &lt;strong&gt;visited&lt;/strong&gt; and it’s coloured &lt;strong&gt;Blue&lt;/strong&gt; below.&lt;/p&gt;

&lt;p&gt;The second is a list which contains locations to check. I’ll call this &lt;strong&gt;queue&lt;/strong&gt;. For each element of the queue there will be the location and the path which lead to the location. Order is imporant, so this is best represented as a list of tuple elements. This is coloured &lt;strong&gt;Light Blue&lt;/strong&gt; below.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; 
         &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;random-walk-depth-first&quot;&gt;Random Walk (Depth-First)&lt;/h2&gt;

&lt;p&gt;Grab the location from the next in queue, add the neighbours to the front of the queue in random order. Grab the location from the next in queue, add the neighbours to the front of the queue in random order. Repeat till you land on your destination or your queue is empty.&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot;&gt;

&lt;source src=&quot;../assets/pathfinding/depth.webm&quot; type=&quot;video/webm&quot; /&gt;

&lt;/video&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]:&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbour&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_neighbours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is an effective algorithm for small problems where any path will do. It has the benefit of being very simple to implement and can be faster to find a solution than a breadth-first search.&lt;/p&gt;

&lt;h2 id=&quot;brute-force-breadth-first&quot;&gt;Brute Force (Breadth-First)&lt;/h2&gt;

&lt;p&gt;If the optimal path is needed, you need to check each possible path and return the first path which finds the destination. This is very similar to brute-force in a combinatoric problem.&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot;&gt;

&lt;source src=&quot;../assets/pathfinding/breadth.webm&quot; type=&quot;video/webm&quot; /&gt;

&lt;/video&gt;

&lt;p&gt;Instead of adding new neighbours to the front of the queue they are put at the end. This ensures we have visited all the neighbours before we introduce new ones.&lt;/p&gt;

&lt;!--
```python
while queue != []:
    (vertex, path) = queue.pop() 

    if vertex == board.end:
        return path + [board.end]

    for neighbour in add_neighbours(vertex):
        queue.insert(0, (neighbour, path + [neighbour]))

    visited.append(vertex)
```
--&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[]:&lt;/span&gt;
    &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;()&lt;/span&gt; 

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt; &lt;span class=&quot;ow&quot; style=&quot;opacity: 0.3;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;add_neighbours&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 1;&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This algorithm finds the best path through taking a step in each direction until it lands on the solution.&lt;/p&gt;

&lt;p&gt;To improve the algorithm, each “step” is not always equal. An algorithm where we can change the value of each step is called Dijkstra’s algorithm.&lt;/p&gt;

&lt;h2 id=&quot;flexibility-from-dijkstra&quot;&gt;Flexibility from (Dijkstra)&lt;/h2&gt;

&lt;p&gt;The same as above, we are going to explicitly define how far we have travelled. This allows us to vary the “weight” of moving from one location to another.&lt;/p&gt;

&lt;p&gt;In the code below, I added a weight variable in each element in the queue. This will be used to compare what location to check next.&lt;/p&gt;

&lt;p&gt;In this case, with a step being “1”, the results are exactly the same as breadth-first search. Replacing this value will change which locations are visited first.&lt;/p&gt;

&lt;!--
```python
while queue != []:
    queue = sorted(queue, lambda x: x[2], reverse=True)
    
    (vertex, path, weight) = queue.pop() 

    if vertex == board.end:
        return path + [board.end]

    for neighbour in add_neighbours(vertex):
        queue.insert(0, (neighbour, path + [neighbour], weight + 1))

    visited.append(vertex)
```
--&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[]:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;()&lt;/span&gt; 

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt; &lt;span class=&quot;ow&quot; style=&quot;opacity: 0.3;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;add_neighbours&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot; style=&quot;opacity: 0.3;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead of taking a step in every direction, what if we could take a step in the direction towards our target?&lt;/p&gt;

&lt;h2 id=&quot;with-a-little-help-from-a-heuristic-best-first&quot;&gt;With a Little Help From A Heuristic (Best-First)&lt;/h2&gt;

&lt;p&gt;In this algorithm, we look at all of the neighbours that have been added to the queue and go to the one that is closest to the final solution. Closest refering to the linear distance between the location and the target.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;distance(a, b) = ((b[0] - a[0]), (b[1] - a[1]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In some cases this is the best solution, but when a wall is between the start and the destination, the solution is not optimal as the path walks into a wall than has to back up.&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot;&gt;

&lt;source src=&quot;../assets/pathfinding/best.webm&quot; type=&quot;video/webm&quot; /&gt;

&lt;/video&gt;

&lt;p&gt;To change this from Dijkstra’s algorithm, instead of ordering the queue by “weight distance”, you order the queue by distance from the destination with the closest being at the front of the queue.&lt;/p&gt;

&lt;!--
```python
while queue != []:
    queue = sorted(queue, lambda x: distance(x[0], board.end), reverse=True)

    (vertex, path, weight) = queue.pop() 

    if vertex == board.end:
        return path + [board.end]

    for neighbour in add_neighbours(vertex):
        queue.insert(0, (neighbour, path + [neighbour], weight + 1))

    visited.append(vertex)
```
--&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[]:&lt;/span&gt;
    &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot; style=&quot;opacity: 0.3;&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot; style=&quot;opacity: 0.3;&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;()&lt;/span&gt; 

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt; &lt;span class=&quot;ow&quot; style=&quot;opacity: 0.3;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;add_neighbours&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot; style=&quot;opacity: 0.3;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;opacity: 0.3;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mix-for-taste-a&quot;&gt;Mix For Taste (A*)&lt;/h2&gt;

&lt;p&gt;We can balance the idealness of Dijkstra’s algorithm with the speed of the Best-First search by combining both metrics for ordering the queue.&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot;&gt;

&lt;source src=&quot;../assets/pathfinding/astar.webm&quot; type=&quot;video/webm&quot; /&gt;

&lt;/video&gt;

&lt;p&gt;When determining the queue order, both the weight from the start and the distance to the destination are used.&lt;/p&gt;

&lt;!--
```python
while queue != []:
    queue = sorted(queue, lambda x: x[2] + distance(x[0], board.end), reverse=True)
    (vertex, path, weight) = queue.pop() 

    if vertex == board.end:
        return path + [board.end]

    for neighbour in add_neighbours(vertex):
        queue.insert(0, (neighbour, path + [neighbour], weight + 1))

    visited.append(vertex)
```
--&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[]:&lt;/span&gt;
    &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot; style=&quot;opacity: 0.3;&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;), &lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot; style=&quot;opacity: 0.3;&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;()&lt;/span&gt; 

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot; style=&quot;opacity: 0.3;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt; &lt;span class=&quot;ow&quot; style=&quot;opacity: 0.3;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;add_neighbours&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot; style=&quot;opacity: 0.3;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;neighbour&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;opacity: 0.3;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;opacity: 0.3;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;opacity: 0.3;&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot; style=&quot;opacity: 0.3;&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This balance directs the search while looking at multiple solutions in that direction to find a close to ideal solution.&lt;/p&gt;

&lt;h2 id=&quot;graph-theory-and-networks&quot;&gt;Graph Theory and Networks&lt;/h2&gt;

&lt;p&gt;Pathfinding is an important method in connecting two nodes in a network. Networks are found everywhere. From the chemical reaction pathways inside a cell, transportion systems, and to the trade and political networks that shape our world.&lt;/p&gt;

&lt;p&gt;These algorithms give an introduction to the costs and benefits of each to help solve real challenges in these networks.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, I would recommend checking out my post on &lt;a href=&quot;https://pucula.com/notes/map-colouring.html&quot;&gt;Map Coloring&lt;/a&gt;. Also, I have posted all of the code on &lt;a href=&quot;https://github.com/lazydancer/path-finding&quot;&gt;github&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m working on a project where I want to connect blocks together using paths. The paths can’t overlap and the algorithm needs to run fast as there are a lot of them.</summary></entry><entry><title type="html">Map Colouring</title><link href="/map-colouring.html" rel="alternate" type="text/html" title="Map Colouring" /><published>2019-04-02T00:00:00-04:00</published><updated>2019-04-02T00:00:00-04:00</updated><id>/map-colouring</id><content type="html" xml:base="/map-colouring.html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Map_coloring&quot;&gt;Map colouring&lt;/a&gt; is an interesting puzzle where you are looking to assign different colours to different feautures on a map. It was first mentioned in 1852 as a mathamatics problem to determine the minimum number of colors when trying to colour a map of England. It was postulated that 4 colors were the minimum number of colours to fill a map so that no regions sharing a common border had the same colour.&lt;/p&gt;

&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;../assets/map-colouring/English_ceremonial_counties_1998.svg&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;Since then computers have got much quicker and there are many different proof methods for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Four_color_theorem&quot;&gt;Four color theorem&lt;/a&gt; and was the first major theorem to be proved using a computer in 1976.&lt;/p&gt;

&lt;p&gt;When converting the map to a graph, with the features represents as nodes and the borders as connections this becomes a more difficult problem and more useful part of graph theory. It could be used in scheduling problems, register allocation problems and problems such as pattern matching and solving Sudoku puzzles.&lt;/p&gt;

&lt;h2 id=&quot;solving&quot;&gt;Solving&lt;/h2&gt;

&lt;p&gt;For the second segment of the discrete optimization course you need to colour a map where each neighbouring country is a different colour. The challenge is to find the smallest number of colours to fill in the map. Like the other problems in this course, this is an NP problem.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Nodes&lt;/th&gt;
      &lt;th&gt;Colours&lt;/th&gt;
      &lt;th&gt;Number of States&lt;/th&gt;
      &lt;th&gt;Time to Solve*&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Small Example&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;3,486,784,401 or 10^9&lt;/td&gt;
      &lt;td&gt;2 seconds&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Counties of England&lt;/td&gt;
      &lt;td&gt;83&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;10^50&lt;/td&gt;
      &lt;td&gt;10^36 years&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Countries of the World&lt;/td&gt;
      &lt;td&gt;195&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;10^117&lt;/td&gt;
      &lt;td&gt;10^103 years&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;*Assuming 2GHz computer, very optimistically checking 1 combination a cycle&lt;/p&gt;

&lt;h2 id=&quot;brute-force&quot;&gt;Brute force&lt;/h2&gt;

&lt;p&gt;I would start by trying every single combination and returning the best solution. Computers are great with numbers and I want to be lazy. But looking at the table above there is no way to complete this in a reasonable time.&lt;/p&gt;

&lt;p&gt;We need another way&lt;/p&gt;

&lt;h2 id=&quot;pick-most-connected&quot;&gt;Pick most connected&lt;/h2&gt;

&lt;p&gt;Instead of trying every combination, lets order the way we select the nodes we colour. Starting from the node which has the most connections, choosing its colour and moving to the next, adding a new colour if neighbouring nodes used all the previous colors. This will run until all the colours are chosen&lt;/p&gt;

&lt;p&gt;This is so much faster! It is a greedy algorithm so it doesn’t give us an optimal result, but the speed is important here. When you add a new node, it adds only a small amount of time and is close to linear.&lt;/p&gt;

&lt;h2 id=&quot;saturation&quot;&gt;Saturation&lt;/h2&gt;

&lt;p&gt;This method is very similar to the “most connected” but in this case the next node to select will update each time. When a node is colored the connected nodes are updated with a new saturation number. This saturation number tells how many different colors a node neighbours with. The other name for this algorithm is DSATUR and is a well known algorithm for completing this problem&lt;/p&gt;

&lt;h2 id=&quot;continuing&quot;&gt;Continuing&lt;/h2&gt;

&lt;p&gt;So far it has been interesting on how large NP problems can get and we have to try different algorithms. A good enough solution is much easier to get than a perfect solution. I will continue to write more about this as I go through the class and it looks like there is some possibility of using local search.&lt;/p&gt;

&lt;p&gt;Thank you for reading&lt;/p&gt;</content><author><name></name></author><summary type="html">Map colouring is an interesting puzzle where you are looking to assign different colours to different feautures on a map. It was first mentioned in 1852 as a mathamatics problem to determine the minimum number of colors when trying to colour a map of England. It was postulated that 4 colors were the minimum number of colours to fill a map so that no regions sharing a common border had the same colour.</summary></entry><entry><title type="html">Pictures To Text</title><link href="/pictures-to-text.html" rel="alternate" type="text/html" title="Pictures To Text" /><published>2019-03-16T00:00:00-04:00</published><updated>2019-03-16T00:00:00-04:00</updated><id>/pictures-to-text</id><content type="html" xml:base="/pictures-to-text.html">&lt;p&gt;Converted a picture into text just for fun. To complete this I used jupyter notebook, found below. The code is avaliable on &lt;a href=&quot;https://github.com/lazydancer/pictotxt&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot; style=&quot;line-height:1;&quot;&gt;&lt;pre class=&quot;highlight&quot; style=&quot;font-size: 11px;&quot;&gt;&lt;code&gt;.gMBy         
  WgM_        
  M@DMg_      
  $BMGDMg     
   `MgZMMg_   
    _&amp;lt;V _MMK_ 
  _1P&quot;`    &quot;gg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The notebook contains 3 parts:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Image&lt;/strong&gt; - Input image to be converted. It’s chopped up into little bits.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Font&lt;/strong&gt; - Input font. The characters are extrated as images.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Calc&lt;/strong&gt; - the images and font characters are compared to find the best match&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PIL&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageDraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageFont&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;skimage.util.shape&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view_as_blocks&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;image&quot;&gt;Image&lt;/h2&gt;

&lt;p&gt;First thing is import the image. As an example I use the finch. Most of the following code is to convert the image from a PIL array to numpy’s 2D narray and use matlibplot plot function.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'L'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;show_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'download.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;../assets/pictures-to-text/download (1).png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;The next step is taking the imported image and converting it into character sized images. The heart of the following methods are the &lt;strong&gt;view_as_blocks&lt;/strong&gt;. The function fails if there is an overlap with the  edge of the imported image. The function &lt;strong&gt;trim_image&lt;/strong&gt; is there to remove the excess before it sent in to &lt;strong&gt;view_as_blocks&lt;/strong&gt;. The result can be seen below.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trim_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;trim_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_y&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;trim_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_x&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trim_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trim_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_image_slices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'L'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#greyscale
&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view_as_blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;char_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;char_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_image_slices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'download.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nb_across&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nb_down&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nb_across&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nb_down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;../assets/pictures-to-text/download2.png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;h2 id=&quot;fonts&quot;&gt;Fonts&lt;/h2&gt;

&lt;p&gt;Now we have the images, we can match characters to them. First we need to get images of the font to compare. We will be using the ascii character set, this is found in the &lt;strong&gt;string.printable&lt;/strong&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;font_images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;truetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fonts/SFMono-Regular.otf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printable&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'RGB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageDraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'L'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#greyscale
&lt;/span&gt;        
        &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;letters_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font_images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;../assets/pictures-to-text/download3.png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;h2 id=&quot;calc&quot;&gt;Calc&lt;/h2&gt;

&lt;p&gt;Now we have sections of the input image and character images, we just need to pick the best match. In this case I used:&lt;/p&gt;

&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;../assets/pictures-to-text/download4.png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;where A and B are matricis of the same size. We want the lowest score as that will be the smallest difference. I guess I could have inverted it so we were looking for the max or I could have called it the loss function.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solve_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;min_score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;min_letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;min_score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;min_letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;min_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;../assets/pictures-to-text/download5.png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;Now we can finish it by collecting the characters and printing&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;result_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letters_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_slices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot; style=&quot;line-height:1;&quot;&gt;&lt;pre class=&quot;highlight&quot; style=&quot;font-size: 11px;&quot;&gt;&lt;code&gt;.gMBy         
  WgM_        
  M@DMg_      
  $BMGDMg     
   `MgZMMg_   
    _&amp;lt;V _MMK_ 
  _1P&quot;`    &quot;gg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a style=&quot;padding-left:7px;&quot; href=&quot;https://github.com/lazydancer/pictotxt&quot;&gt;Github »&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tools:&lt;/p&gt;
&lt;svg fill=&quot;#3776AB&quot; width=&quot;40px&quot; height=&quot;40px&quot; style=&quot;padding-left: 8px;&quot; viewBox=&quot;0 0 24 24&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot;&gt;&lt;title&gt;Python&lt;/title&gt;&lt;path d=&quot;M14.31.18l.9.2.73.26.59.3.45.32.34.34.25.34.16.33.1.3.04.26.02.2-.01.13V8.5l-.05.63-.13.55-.21.46-.26.38-.3.31-.33.25-.35.19-.35.14-.33.1-.3.07-.26.04-.21.02H8.83l-.69.05-.59.14-.5.22-.41.27-.33.32-.27.35-.2.36-.15.37-.1.35-.07.32-.04.27-.02.21v3.06H3.23l-.21-.03-.28-.07-.32-.12-.35-.18-.36-.26-.36-.36-.35-.46-.32-.59-.28-.73-.21-.88-.14-1.05L0 11.97l.06-1.22.16-1.04.24-.87.32-.71.36-.57.4-.44.42-.33.42-.24.4-.16.36-.1.32-.05.24-.01h.16l.06.01h8.16v-.83H6.24l-.01-2.75-.02-.37.05-.34.11-.31.17-.28.25-.26.31-.23.38-.2.44-.18.51-.15.58-.12.64-.1.71-.06.77-.04.84-.02 1.27.05 1.07.13zm-6.3 1.98l-.23.33-.08.41.08.41.23.34.33.22.41.09.41-.09.33-.22.23-.34.08-.41-.08-.41-.23-.33-.33-.22-.41-.09-.41.09-.33.22z&quot; /&gt;&lt;path d=&quot;M21.1 6.11l.28.06.32.12.35.18.36.27.36.35.35.47.32.59.28.73.21.88.14 1.04.05 1.23-.06 1.23-.16 1.04-.24.86-.32.71-.36.57-.4.45-.42.33-.42.24-.4.16-.36.09-.32.05-.24.02-.16-.01h-8.22v.82h5.84l.01 2.76.02.36-.05.34-.11.31-.17.29-.25.25-.31.24-.38.2-.44.17-.51.15-.58.13-.64.09-.71.07-.77.04-.84.01-1.27-.04-1.07-.14-.9-.2-.73-.25-.59-.3-.45-.33-.34-.34-.25-.34-.16-.33-.1-.3-.04-.25-.02-.2.01-.13v-5.34l.05-.64.13-.54.21-.46.26-.38.3-.32.33-.24.35-.2.35-.14.33-.1.3-.06.26-.04.21-.02.13-.01h5.84l.69-.05.59-.14.5-.21.41-.28.33-.32.27-.35.2-.36.15-.36.1-.35.07-.32.04-.28.02-.21V6.07h2.09l.14.01.21.03zm-6.47 14.25l-.23.33-.08.41.08.41.23.33.33.23.41.08.41-.08.33-.23.23-.33.08-.41-.08-.41-.23-.33-.33-.23-.41-.08-.41.08-.33.23z&quot; /&gt;&lt;/svg&gt;

&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pictotxt&lt;/strong&gt; is a python script which converts an image to text&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lazydancer/pictotxt/master/examples/movie.gif&quot; alt=&quot;pictotxt&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-use&quot;&gt;How to use&lt;/h2&gt;

&lt;p&gt;Requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Python Image Library (PIL)&lt;/li&gt;
  &lt;li&gt;Numpy&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:lazydancer/pictotxt.git
cd pictotxt
pip install -r requirements
python src/pictotxt.py examples/octocat.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result will be printed on your console/terminal&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;Input:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lazydancer/pictotxt/master/examples/step1.png&quot; alt=&quot;step1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The imported image is split up into ‘character sized’ images.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lazydancer/pictotxt/master/examples/step2.png&quot; alt=&quot;step2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Split of the font to get individual images of each character&lt;/p&gt;

&lt;p&gt;For each mini-image from the imported image, compare it with all the characters and find the best match with the following function&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lazydancer/pictotxt/master/examples/step4.png&quot; alt=&quot;step4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lazydancer/pictotxt/master/examples/step5.png&quot; width=&quot;366&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;</content><author><name></name></author><summary type="html">Converted a picture into text just for fun. To complete this I used jupyter notebook, found below. The code is avaliable on github.</summary></entry><entry><title type="html">Introduction To Fossil Fuels</title><link href="/introduction-to-fossil-fuels.html" rel="alternate" type="text/html" title="Introduction To Fossil Fuels" /><published>2019-02-22T00:00:00-05:00</published><updated>2019-02-22T00:00:00-05:00</updated><id>/introduction-to-fossil-fuels</id><content type="html" xml:base="/introduction-to-fossil-fuels.html">&lt;p&gt;Formed over millions of years, fossil fuels are essential to way we live and have greatly improved our standard of living. Today, &lt;strong&gt;87%&lt;/strong&gt; of the world’s primary energy is from fossil fuels. In this article I will give an overview of these fuel sources.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: rgb(127, 0, 0); font-weight: bold&quot;&gt;Coal&lt;/span&gt;, &lt;span style=&quot;color: rgb(184, 13, 8); font-weight: bold&quot;&gt;Crude Oil&lt;/span&gt; and &lt;span style=&quot;color: rgb(241, 109, 74); font-weight: bold&quot;&gt;Natural Gas&lt;/span&gt;&lt;/p&gt;

&lt;svg class=&quot;current_energy&quot; width=&quot;700&quot; height=&quot;50&quot;&gt;&lt;rect width=&quot;199.49999999999997&quot; height=&quot;50&quot; x=&quot;0&quot; style=&quot;fill: rgb(127, 0, 0);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;244.99999999999997&quot; height=&quot;50&quot; x=&quot;199.49999999999997&quot; style=&quot;fill: rgb(184, 13, 8);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;167.29999999999998&quot; height=&quot;50&quot; x=&quot;444.49999999999994&quot; style=&quot;fill: rgb(241, 109, 74);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;49.699999999999996&quot; height=&quot;50&quot; x=&quot;611.8&quot; style=&quot;fill: rgb(253, 205, 153);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;2.1&quot; height=&quot;50&quot; x=&quot;661.5&quot; style=&quot;fill: rgb(255, 240, 219);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;2.8000000000000003&quot; height=&quot;50&quot; x=&quot;663.6&quot; style=&quot;fill: rgb(255, 241, 223);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;18.2&quot; height=&quot;50&quot; x=&quot;666.4&quot; style=&quot;fill: rgb(255, 243, 228);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;11.9&quot; height=&quot;50&quot; x=&quot;684.6&quot; style=&quot;fill: rgb(255, 245, 232);&quot;&gt;&lt;/rect&gt;&lt;rect width=&quot;4.9&quot; height=&quot;50&quot; x=&quot;696.5&quot; style=&quot;fill: rgb(255, 245, 232);&quot;&gt;&lt;/rect&gt;&lt;/svg&gt;

&lt;h2 id=&quot;coal&quot;&gt;Coal&lt;/h2&gt;

&lt;p&gt;Millions of years ago, plants died and other plants died on these plants forming peat. With every additional layer of plant matter, the layers below were compressed and heated forming coal, a carbon rich and energy density material.&lt;/p&gt;

&lt;p&gt;Coal was a critical fuel of the Industrial Revolution, being vital for steam engines and furnaces. Before coal, wood was the primary fuel used but over time the transition occured due to it being cheaper and more energy dense&lt;/p&gt;

&lt;p&gt;Not all coal is the same, the two most important factors to classifying coal are its calorific value, how much energy can it release when burned, and its percent of carbon, a higher percent carbon is a cleaner burning fuel, other atoms hydrogen, sulfur, oxygen and nitrogen are common.&lt;/p&gt;

&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;../assets/fossil-fuels/Coal_Rank_USGS.png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Produced&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bituminous&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;46%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Subbituminous&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;45%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Lignite&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Anthracite&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;lt;1%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Coal can also be used to form coke, which improves its carbon purity. With the increased purity, it can be burned at higher temperatures which is important as a fuel and reducing agent in smelting iron ore.&lt;/p&gt;

&lt;p&gt;Coal’s main use is the generation of electricity. This is done through boiling water into steam and spinning a turbine connected to a generator to create electricity. The overall thermodynamic efficiency is between 25% to 50%.&lt;/p&gt;

&lt;p&gt;With newer technologies, the coal can be convert the coal to Syngas to a heat recovery steam generator. This powers a steam turbine and the waste heat can be used to heat a process or a building. This type of power plant could reach efficiencies up to 94%.&lt;/p&gt;

&lt;h3 id=&quot;stats&quot;&gt;Stats&lt;/h3&gt;

&lt;p&gt;We can divide the end use into direct, either in a vehicle or in a manufacturing process and electricity where we make electricity first. Out of the three fossil fuels coal is the most difficult to transport and creates the most pollution. Therefore coal is popular in electricity generation outside of cities.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Direct 32%&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cost&lt;/td&gt;
      &lt;td&gt;3.9&lt;/td&gt;
      &lt;td&gt;USD/GJ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Specific Energy&lt;/td&gt;
      &lt;td&gt;0.030&lt;/td&gt;
      &lt;td&gt;GJ/kg&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Energy Density&lt;/td&gt;
      &lt;td&gt;38&lt;/td&gt;
      &lt;td&gt;GJ/m^3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Emission Intensity&lt;/td&gt;
      &lt;td&gt;96&lt;/td&gt;
      &lt;td&gt;kgCO2e/GJ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Electricity Generation 68%&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cost&lt;/td&gt;
      &lt;td&gt;34.7&lt;/td&gt;
      &lt;td&gt;USD/GJ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Emission Intensity&lt;/td&gt;
      &lt;td&gt;265&lt;/td&gt;
      &lt;td&gt;kgCO2e/GJ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;crude-oil&quot;&gt;Crude Oil&lt;/h2&gt;

&lt;p&gt;Also known as &lt;em&gt;Petroleum&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Formed when zooplankton and algae died and buried underneath sedimentary rock and compressed and heated for millions of years. Crude oil is a combination of many different carbon chains.  These carbon chains are separated using a process called fractional distillation, which seperates products by boiling point. Each chain’s has a different boiling point, for example methane has -161.5 degC and gasoline has a boiling point of 35 degC. These form products such as gasoline, diesel, methane, asphalt and chemicals to make plastic.&lt;/p&gt;

&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;../assets/fossil-fuels/Crude_Oil_Distillation.png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;As the same with coal, not all crude oil is the same. Coal is usually classified to where it is found, for example “WTI”, “Bret” and “Oman”. The fuel in these large pockets all have similar characteristics.&lt;/p&gt;

&lt;p&gt;When comparing these pockets, the two largest factors are its sulfur content and API gravity. API gravity is a function of density and is a measure on how heavy or light the crude oil is.&lt;/p&gt;

&lt;div class=&quot;centerImage&quot;&gt;
&lt;img src=&quot;../assets/fossil-fuels/Crudes.png&quot; style=&quot;max-width: 500px;&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;A high API is desired as more gasoline can be extracted from it and a low sulfur content is desired as less processing is needed to remove or capture the excess sulfur.&lt;/p&gt;

&lt;h3 id=&quot;stats-1&quot;&gt;Stats&lt;/h3&gt;

&lt;p&gt;Most crude oil is refined into fuels that we use in a vehicle, gasoline, diesel and jet fuel. Very little is used in electrical generation, therefore I was not able to find a cost of generating electricity. For direct use, I am showing gasoline.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Direct 96%&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cost&lt;/td&gt;
      &lt;td&gt;14.0&lt;/td&gt;
      &lt;td&gt;USD/GJ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Specific Energy&lt;/td&gt;
      &lt;td&gt;0.046&lt;/td&gt;
      &lt;td&gt;GJ/kg&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Energy Density&lt;/td&gt;
      &lt;td&gt;34&lt;/td&gt;
      &lt;td&gt;GJ/m^3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Emission Intensity&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;kgCO2e/GJ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Electricity Generation 4%&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;natural-gas&quot;&gt;Natural Gas&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Natural gas consists of mostly methane. Similar to crude oil and coal it is formed from decaying organic matter and therefore is found close to both coal and crude oil layers. When extracting oil in the 19th and 20th century it was common to burn off the unwanted natural gas.&lt;/p&gt;

&lt;div class=&quot;centerImage&quot; style=&quot;max-width: 200px;&quot;&gt;
&lt;img src=&quot;../assets/fossil-fuels/640px-Methane-2D-dimensions.svg.png&quot; width=&quot;200px&quot; /&gt; 
&lt;/div&gt;

&lt;p&gt;Natural gas is very important and is mostly used directly. It is a low density fuel compared to crude oil and coal, so it has limitation were it can be used. It is relatively clean burning, making it useful domestic heating and electricity generation.&lt;/p&gt;

&lt;p&gt;Natural gas is classified by how pure the methane is but is not a large a factor as seen in crude oil and coal. Processing the natural gas involves striping out sulfur, ethane, propane, butanes and natural gasoline so it is under limits set by the government.&lt;/p&gt;

&lt;p&gt;When converting to electricity, most natural gas-fire electrical generation uses a combined-cycle gas turbines process with a conversion efficiency of 62%.&lt;/p&gt;

&lt;h3 id=&quot;stats-2&quot;&gt;Stats&lt;/h3&gt;

&lt;p&gt;Natural gas is used both in direct consumption for heating, cooking and in electrical generation. It also has lower CO2 emissions than other fossil fuels making it more environmentally friendlily option in comparison.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Direct 58%&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cost&lt;/td&gt;
      &lt;td&gt;3.35&lt;/td&gt;
      &lt;td&gt;USD/GJ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Specific Energy&lt;/td&gt;
      &lt;td&gt;0.056&lt;/td&gt;
      &lt;td&gt;GJ/kg&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Energy Density&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;GJ/m^3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Emission Intensity&lt;/td&gt;
      &lt;td&gt;56&lt;/td&gt;
      &lt;td&gt;kgCO2e/GJ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Electricity Generation 42%&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cost&lt;/td&gt;
      &lt;td&gt;27.46&lt;/td&gt;
      &lt;td&gt;USD/GJ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Emission Intensity&lt;/td&gt;
      &lt;td&gt;166&lt;/td&gt;
      &lt;td&gt;kgCO2e/GJ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I hope this was a useful introduction to the largest energy sources that we use. I always heard about renewable energy but feel like I didn’t understand the energy system until I studied fossil fuels. They all have their benefits and drawbacks but I believe they will be important in the future.&lt;/p&gt;

&lt;p&gt;In this write up I made a lot of assumptions and each number depends on my factors.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;h2 id=&quot;bonus-map-of-oil-refineries-around-the-world&quot;&gt;Bonus: Map of Oil Refineries Around the World&lt;/h2&gt;

&lt;style&gt;
#content .map path {
  fill: #ddd;
  stroke: #aaa;
}

#content circle {
	fill: rgba(0,0,0,0.4);
}

div.tooltip {
  color: white;
  position: absolute;
  text-align: center;
  width: 100px;
  height: 60px;
  padding: 2px;
  font: 12px sans-serif;
  background: rgba(0,0,0,.8);
  border: 1px solid black;
  pointer-events: none;
}

&lt;/style&gt;

&lt;body&gt;
  &lt;div id=&quot;content&quot;&gt;
    &lt;svg width=&quot;800px&quot; height=&quot;400px&quot;&gt;
      &lt;g class=&quot;map&quot;&gt;&lt;/g&gt;
    &lt;/svg&gt;
  &lt;/div&gt;

  &lt;p&gt;source: &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_oil_refineries&quot;&gt;Wikipedia: List of oil refineries&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;I was testing d3js, GEOjson and some javascript code which I found interesting and wanted to share.&lt;/p&gt;

  &lt;p&gt;Oil refineries are the backbone of the world economy, most of our energy generated is from fossil fuels and refineries play an essential role. Currently there are about 660 of them&lt;/p&gt;

  &lt;p&gt;In the chart above I have shown the 10 largest refineries. The largest is in India called the Jamnagar Refinery. It has the capacity of refining 1,240,000 barrels of crude oil per day.&lt;/p&gt;

  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/d3/4.2.2/d3.min.js&quot;&gt;&lt;/script&gt;

  &lt;script&gt;
var geojson = {
  &quot;type&quot;: &quot;FeatureCollection&quot;,
  &quot;features&quot;: [
    {
      &quot;type&quot;: &quot;Feature&quot;,
      &quot;properties&quot;: {
        &quot;name&quot;: &quot;Africa&quot;
      },
      &quot;geometry&quot;: {
        &quot;type&quot;: &quot;Polygon&quot;,
        &quot;coordinates&quot;: [[[-6, 36], [33, 30], [43, 11], [51, 12], [29, -33], [18, -35], [7, 5], [-17, 14], [-6, 36]]]
      }
    },
    {
      &quot;type&quot;: &quot;Feature&quot;,
      &quot;properties&quot;: {
        &quot;name&quot;: &quot;Australia&quot;
      },
      &quot;geometry&quot;: {
        &quot;type&quot;: &quot;Polygon&quot;,
        &quot;coordinates&quot;: [[[143, -11], [153, -28], [144, -38], [131, -31], [116, -35], [114, -22], [136, -12], [140, -17], [143, -11]]]
      }
    },
    {
      &quot;type&quot;: &quot;Feature&quot;,
      &quot;properties&quot;: {
        &quot;name&quot;: &quot;Timbuktu&quot;
      },
      &quot;geometry&quot;: {
        &quot;type&quot;: &quot;Point&quot;,
        &quot;coordinates&quot;: [-3.0026, 16.7666]
      }
    }
  ]
};

var refineries = [
	{&quot;name&quot;: &quot;Jamnager Refinery&quot;, &quot;location&quot;: &quot;Jamnagar, Gujarat, India&quot;, &quot;production&quot; : 1240000, &quot;coordinates&quot;: [69.52, 22.20]},
	{&quot;name&quot;: &quot;Paraguana Refinery&quot;, &quot;location&quot;: &quot;Punto Fijo, Falcón, Venezuela&quot;, &quot;production&quot; : 940000, &quot;coordinates&quot;: [-70.11, 11.44]},
	{&quot;name&quot;: &quot;SK Energy Ulsan Refinery&quot;, &quot;location&quot;: &quot;Ulsan, South Korea&quot;, &quot;production&quot; : 850000, &quot;coordinates&quot;: [129.34, 35.43]},
	{&quot;name&quot;: &quot;Ruwais Refinery&quot;, &quot;location&quot;: &quot;Ruwais, UAE&quot;, &quot;production&quot; :  	817000, &quot;coordinates&quot;: [52.72, 24.12]},
	{&quot;name&quot;: &quot;Yeosu Refinery&quot;, &quot;location&quot;: &quot;Yeosu, South Jeolla, South Korea&quot;, &quot;production&quot;: 730000, &quot;coordinates&quot;: [127.75, 34.72]},
	{&quot;name&quot;: &quot;Onsan Refinery&quot;, &quot;location&quot;: &quot;Ulsan, South Korea&quot;, &quot;production&quot;:  669000, &quot;coordinates&quot;: [129.34, 35.44]},
	{&quot;name&quot;: &quot;Jurong Island Refinery&quot;, &quot;location&quot;: &quot;Jurong Island, Singapore&quot;, &quot;production&quot;:  605000, &quot;coordinates&quot;: [103.70, 1.27]},
	{&quot;name&quot;: &quot;Port Arthur Refinery&quot;, &quot;location&quot;: &quot;Port Arthur, Texas, United States&quot;, &quot;production&quot;:  603000, &quot;coordinates&quot;: [-93.57, 29.53]},
	{&quot;name&quot;: &quot;Galveston Bay Refinery&quot;, &quot;location&quot;: &quot;Texas City, Texas, United States&quot;, &quot;production&quot;:  571000, &quot;coordinates&quot;: [-94.91, 29.40]},
	{&quot;name&quot;: &quot;Baytown Refinery&quot;, &quot;location&quot;: &quot;Baytown, Texas, United States&quot;, &quot;production&quot;:  560500, &quot;coordinates&quot;: [-95.01, 29.74]},
	{&quot;name&quot;: &quot;Garyville Refinery&quot;, &quot;location&quot;: &quot;Garyville, Louisiana, United States&quot;, &quot;production&quot;: 556000 , &quot;coordinates&quot;: [-90.36,30.03]},
	{&quot;name&quot;: &quot;Ras Tanura Refinery&quot;, &quot;location&quot;: &quot;Ras Tanura, Saudi Arabia&quot;, &quot;production&quot;: 550000 , &quot;coordinates&quot;: [50.10,26.39]},
	{&quot;name&quot;: &quot; 	Baton Rouge Refinery&quot;, &quot;location&quot;: &quot;Baton Rouge, Louisiana, United States&quot;, &quot;production&quot;: 502500, &quot;coordinates&quot;: [-91.10,30.29]},
	{&quot;name&quot;: &quot;Shell Pulau Bukom Refinery&quot;, &quot;location&quot;: &quot;Bukom Island, Singapore&quot;, &quot;production&quot;:  500000, &quot;coordinates&quot;: [103.45,1.14]},
	{&quot;name&quot;: &quot;Abadan Refinery&quot;, &quot;location&quot;: &quot;Abadan, Iran&quot;, &quot;production&quot;: 450000 , &quot;coordinates&quot;: [48.18,30.20]},

]




d3.json('../assets/maps/ne_110m_land.json', function(err, json) {
  createMap(json);
})

createMap = (geojson) =&gt; {

	var projection = d3.geoMercator()
	  .fitSize([722, 400], geojson)
	 
	var geoGenerator = d3.geoPath()
	  .projection(projection);

	function update(geojson) {
	  var u = d3.select('#content g.map')
	    .selectAll('path')
	    .data(geojson.features);

	  u.enter()
	    .append('path')
	    .attr('d', geoGenerator);
		
	  svg = d3.select(&quot;svg&quot;);

	  console.log(svg)

    // Define the div for the tooltip
    const div = d3
      .select('body')
      .append('div')
      .attr('class', 'tooltip')
      .style('opacity', 0);

    handleMouseOver = (d, i) =&gt; {
      div
        .transition()
        .duration(200)
        .style('opacity', 0.9);
      div
        .html(d.name + ' - ' + (d.production).toLocaleString('en') + ' barrels per day')
        .style('left', d3.event.pageX + 10 + 'px')
        .style('top', d3.event.pageY - 28 + 'px');

    }

    handleMouseOut = (d, i) =&gt; {
      div
            .transition()
            .duration(500)
            .style('opacity', 0);
    }
        
	  svg.append(&quot;g&quot;)
	  		.attr(&quot;class&quot;, &quot;bubble&quot;)
	  	.selectAll(&quot;circle&quot;)
	  		.data(refineries)
	  	.enter().append(&quot;circle&quot;)
	  		.attr(&quot;transform&quot;, d =&gt; &quot;translate(&quot; + projection(d.coordinates) + &quot;)&quot;)
	  		.attr(&quot;r&quot;, d =&gt; Math.sqrt(d.production/10000))
        .on('mouseover', handleMouseOver)
        .on('mouseout', handleMouseOut);

 
	}

	update(geojson);

}

  &lt;/script&gt;
&lt;/body&gt;
&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ourworldindata.org/fossil-fuels&quot;&gt;Our World in Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.iea.org/Sankey/&quot;&gt;Sankey&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cement-co2-protocol.org/en/Content/Internet_Manual/constants.htm&quot;&gt;Emission Factors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cost_of_electricity_by_source&quot;&gt;Levelized Cost of Energy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.eia.gov/energyexplained/index.php?page=coal_prices&quot;&gt;Coal Price&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vaclavsmil.com/2016/12/14/energy-transitions-global-and-national-perspectives-second-expanded-and-updated-edition/&quot;&gt;Vaclav Smil (2017)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bp.com/en/global/corporate/energy-economics/statistical-review-of-world-energy.html&quot;&gt;BP Statistical Review of World Energy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ipcc.ch/site/assets/uploads/2018/02/ipcc_wg3_ar5_annex-iii.pdf&quot;&gt;IPCC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Formed over millions of years, fossil fuels are essential to way we live and have greatly improved our standard of living. Today, 87% of the world’s primary energy is from fossil fuels. In this article I will give an overview of these fuel sources.</summary></entry><entry><title type="html">Making A Transistor</title><link href="/making-a-transistor.html" rel="alternate" type="text/html" title="Making A Transistor" /><published>2018-11-19T00:00:00-05:00</published><updated>2018-11-19T00:00:00-05:00</updated><id>/making-a-transistor</id><content type="html" xml:base="/making-a-transistor.html">&lt;p&gt;I recently finished the book CODE - a book on how to build a computer from scratch. The book was awesome and I wanted to learn more about how a physical computer was built
&lt;/p&gt;

&lt;p&gt;Silicon is great. It's great because it's a semiconductor. Semiconductors are great because we can create interesting properties of how much much energy it takes to release the electron from its orbit and how much energy it takes for an atom to accept an electron.

&lt;p&gt;This difference between an electron being released and being captured is important and has the name &lt;b&gt;band gap&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;When electrons can move we call that electricity. Some material like metal have no band gap meaning that electrons flow easily through them. Insulators there is a band gap and it is difficult.&lt;/p&gt;

&lt;p&gt;As seen in the diagram below semicondutors are between conductors and insulators&lt;/p&gt;

&lt;img src=&quot;../assets/making-a-transistor/351px-Band_filling_diagram.svg.png&quot; /&gt;

&lt;p&gt;
&lt;span style=&quot;font-size: 10px&quot;&gt; https://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Band_filling_diagram.svg&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;You can shift this band gap by doping silicon&lt;/p&gt;


&lt;li&gt;Silicon with &lt;b&gt;boron&lt;/b&gt; atoms is called &lt;b style=&quot;color: #1070CA&quot;&gt;p-type silicon&lt;/b&gt;, where there is a lack of electrons called holes&lt;/li&gt;
&lt;li&gt;Silicon with &lt;b&gt;phosphorus&lt;/b&gt; atoms is called &lt;b style=&quot;color: #F7D154&quot;&gt;n-type silicon&lt;/b&gt;, where free electrons are added&lt;/li&gt;

&lt;img src=&quot;../assets/making-a-transistor/psem2.gif&quot; /&gt;
&lt;img src=&quot;../assets/making-a-transistor/nsem.gif&quot; /&gt;

&lt;p&gt;
&lt;span style=&quot;font-size: 10px&quot;&gt;http://hyperphysics.phy-astr.gsu.edu/hbase/Solids/imgsol/psem2.gif and http://hyperphysics.phy-astr.gsu.edu/hbase/Solids/imgsol/nsem.gif&lt;/span&gt;


&lt;p&gt;Lets take a block of p-type silicon and a block of n-type silicon and put them together. 

&lt;p&gt;Where they touch electrons will move from n-type material to p-type material. This is because the n-type atoms have less &quot;hold&quot; on there valence electrons and the p-type is &quot;pulling&quot; these electron&lt;/p&gt;

&lt;p&gt;Since the n-type lost an electron, it is not balanced and has to many protons. Making the area positively charged. The equilent and opposite for the p-type. In the diagram below, the lighter yellow has a positive charge. 

&lt;p&gt;
&lt;svg viewBox=&quot;0 0 420 350&quot; width=&quot;100%&quot;&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; y=&quot;40px&quot; fill=&quot;#1070CA&quot; /&gt; 
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;220px&quot; y=&quot;40px&quot; fill=&quot;#F7D154&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;10px&quot; y=&quot;200px&quot; fill=&quot;#1070CA&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;210px&quot; y=&quot;200px&quot; fill=&quot;#F7D154&quot; /&gt;
  &lt;rect width=&quot;20px&quot; height=&quot;140px&quot; x=&quot;190px&quot; y=&quot;200px&quot; fill=&quot;white&quot; opacity=&quot;0.5&quot; /&gt;
  &lt;rect width=&quot;20px&quot; height=&quot;140px&quot; x=&quot;210px&quot; y=&quot;200px&quot; fill=&quot;white&quot; opacity=&quot;0.5&quot; /&gt;
&lt;/svg&gt;
&lt;/p&gt;
&lt;!--
&lt;p&gt;&lt;img src=&quot;https://www.electronics-tutorials.ws/diode/diode4a.gif&quot; /&gt;
--&gt;


&lt;p&gt;This charge causes a magnetic effect due unbalanced charges. The magnetic effect is the opposing effect to the movement of electrons causing an equilibrium at a certain distance&lt;/p&gt;

&lt;p&gt;Since we are displacing electrons from there position, this magnetic effect can also be seen as an electrical potential, aka voltage, within the material&lt;/p&gt;

&lt;p&gt;
&lt;img margin-top=&quot;20px&quot; width=&quot;100%&quot; src=&quot;../assets/making-a-transistor/pn-junction.png&quot; /&gt;
&lt;/p&gt;
&lt;span style=&quot;font-size:10pt&quot;&gt;https://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Pn-junction-equilibrium-graphs.png&lt;/span&gt;

&lt;p&gt; ---------------- &lt;/p&gt;

&lt;p&gt;What happens if we try to put electricity though it. 

&lt;p&gt;First, focus on voltage. Don't worry about current. When you put + on the p-type side it will attract the electrons back into the n-type and if you put electrons on the p-type it will push away the electrons / attached the holes. &lt;/p&gt;

&lt;p&gt;This causes the number of electrons that are in the other region. Making the voltage to cross the region less. This is what happens when it allows the current to flow. If we change the direction and put the electrons on the n-type. &lt;/p&gt;

&lt;p&gt;It will push away the electrons towards the holes and putting + on the p-type will attract the electrons farther in. This increases the number of electrons in the other region increasing the voltage needed to overcome in the materials. Now it is very difficult for the current to move, it would have to overcome the entire region voltage.&lt;/p&gt;

&lt;p&gt;Try out the slider below, if you see electricity can only go one direction. We just made an &lt;b&gt;electrical diode&lt;/b&gt;!&lt;/p&gt;

&lt;p&gt;
&lt;svg viewBox=&quot;0 0 480 300&quot; width=&quot;100%&quot; id=&quot;svgDiode&quot;&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;30px&quot; y=&quot;20px&quot; fill=&quot;#1070CA&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;230px&quot; y=&quot;20px&quot; fill=&quot;#F7D154&quot; /&gt;
  &lt;rect id=&quot;svgDiode_diffusionArea&quot; width=&quot;40px&quot; height=&quot;140px&quot; x=&quot;210px&quot; y=&quot;20px&quot; fill=&quot;white&quot; opacity=&quot;0.5&quot; /&gt;
  &lt;circle r=&quot;5px&quot; cx=&quot;30px&quot; cy=&quot;90px&quot; fill=&quot;black&quot; /&gt;
  &lt;circle r=&quot;5px&quot; cx=&quot;430px&quot; cy=&quot;90px&quot; fill=&quot;black&quot; /&gt;
  &lt;polyline points=&quot;30,90 10,90 10,240 225,240&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;polyline points=&quot;430,90 450,90 450,240 235,240&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;polyline id=&quot;svgDiode_leftBattery&quot; points=&quot;225,260 225,220&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;polyline id=&quot;svgDiode_rightBattery&quot; points=&quot;235,250 235,230&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;text x=&quot;215&quot; y=&quot;280&quot; id=&quot;svgDiode_text&quot;&gt;0.1V&lt;/text&gt;
&lt;/svg&gt;
&lt;/p&gt;

 &lt;input type=&quot;range&quot; min=&quot;-5&quot; max=&quot;5&quot; value=&quot;-0.1&quot; step=&quot;0.1&quot; class=&quot;slider&quot; id=&quot;myRange&quot; /&gt;

 &lt;script&gt;
    let slider = document.getElementById(&quot;myRange&quot;);
    let voltage = document.getElementById(&quot;svgDiode_text&quot;)
    slider.oninput = () =&gt; {
      voltage.innerHTML = Math.abs(slider.value) + &quot; V&quot;
      updateBatteryDirection(slider.value)
      updateDiffusionRegion(slider.value)
    }

    const updateBatteryDirection = (value) =&gt; {
      let leftBattery = document.getElementById(&quot;svgDiode_leftBattery&quot;)
      let rightBattery = document.getElementById(&quot;svgDiode_rightBattery&quot;)
      if(value &lt; 0){
        leftBattery.setAttribute('points','225,260 225,220')
        rightBattery.setAttribute('points','235,250 235,230')
      } else {
        leftBattery.setAttribute('points','225,250 225,230')
        rightBattery.setAttribute('points','235,260 235,220')
      } 
    }

    const updateDiffusionRegion = (value) =&gt; {
      let diffusionArea = document.getElementById(&quot;svgDiode_diffusionArea&quot;)
      
      diffusionArea.setAttribute('x', 28.5 * value + 210 )
      diffusionArea.setAttribute('width', -57.14 * value + 40)
      // 0.7 x = 230 width = 0
      // 0   x = 210 width = 40
    }

 &lt;/script&gt;

&lt;p&gt; When you try to push electrons to go backwards, the NP junction pushes back at the same but opposite potential. &lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;Okay, now the MOSFET part.&lt;/p&gt;

&lt;p&gt;If you put another n-type material infront of the diode you get a material that doesn't flow any electrity and isn't useful.


&lt;svg viewBox=&quot;0 0 680 300&quot; width=&quot;100%&quot; id=&quot;svgTransistor&quot;&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;30px&quot; y=&quot;20px&quot; fill=&quot;#F7D154&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;230px&quot; y=&quot;20px&quot; fill=&quot;#1070CA&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;430px&quot; y=&quot;20px&quot; fill=&quot;#F7D154&quot; /&gt;
  &lt;rect id=&quot;svgTransistor_diffusionArea&quot; width=&quot;40px&quot; height=&quot;140px&quot; x=&quot;210px&quot; y=&quot;20px&quot; fill=&quot;white&quot; opacity=&quot;0.5&quot; /&gt;
  &lt;rect id=&quot;svgTransistor_diffusionArea2&quot; width=&quot;40px&quot; height=&quot;140px&quot; x=&quot;410px&quot; y=&quot;20px&quot; fill=&quot;white&quot; opacity=&quot;0.5&quot; /&gt;
  &lt;circle r=&quot;5px&quot; cx=&quot;30px&quot; cy=&quot;90px&quot; fill=&quot;black&quot; /&gt;
  &lt;circle r=&quot;5px&quot; cx=&quot;630px&quot; cy=&quot;90px&quot; fill=&quot;black&quot; /&gt;
  &lt;polyline points=&quot;30,90 10,90 10,240 225,240&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;polyline points=&quot;630,90 650,90 650,240 235,240&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;polyline id=&quot;svgTransistor_leftBattery&quot; points=&quot;225,260 225,220&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;polyline id=&quot;svgTransistor_rightBattery&quot; points=&quot;235,250 235,230&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;text x=&quot;215&quot; y=&quot;280&quot; id=&quot;svgTransistor_text&quot;&gt;0.1V&lt;/text&gt;
&lt;/svg&gt;
 
 &lt;input type=&quot;range&quot; min=&quot;-5&quot; max=&quot;5&quot; value=&quot;0&quot; step=&quot;0.1&quot; class=&quot;slider&quot; id=&quot;transistor_myRange&quot; /&gt;
 
  &lt;script&gt; 
    let bslider = document.getElementById(&quot;transistor_myRange&quot;);
    let bvoltage = document.getElementById(&quot;svgTransistor_text&quot;)
    bslider.oninput = () =&gt; {
      bvoltage.innerHTML = Math.abs(bslider.value) + &quot; V&quot;
      bupdateBatteryDirection(bslider.value)
      bupdateDiffusionRegion(bslider.value)
      bupdateDiffusionRegion2(bslider.value)
    }
 
    const bupdateBatteryDirection = (value) =&gt; {
      let leftBattery = document.getElementById(&quot;svgTransistor_leftBattery&quot;)
      let rightBattery = document.getElementById(&quot;svgTransistor_rightBattery&quot;)
      if(value &gt; 0){
        leftBattery.setAttribute('points','225,260 225,220')
        rightBattery.setAttribute('points','235,250 235,230')
      } else {
  leftBattery.setAttribute('points','225,250 225,230')
        rightBattery.setAttribute('points','235,260 235,220')
      } 
    }

    const bupdateDiffusionRegion = (value) =&gt; {
      let diffusionArea = document.getElementById(&quot;svgTransistor_diffusionArea&quot;)
      
      diffusionArea.setAttribute('x', 28.5 * value + 210 )
      diffusionArea.setAttribute('width', -57.14 * value + 40)
      // 0.7 x = 230 width = 0
      // 0   x = 210 width = 40
    }

 const bupdateDiffusionRegion2 = (value) =&gt; {
      let diffusionArea = document.getElementById(&quot;svgTransistor_diffusionArea2&quot;)
      
      diffusionArea.setAttribute('x', -28.5 * value + 410 )
      diffusionArea.setAttribute('width', 57.14 * value + 40)

}

  &lt;/script&gt;




&lt;p&gt;Put a connector on the base. But not directly on the base but close enough that the magnetic field effects the material but electrons moving between is not possible. Usally an Oxide.

&lt;p&gt;Aside: this is how the MOSFET = Metal-Oxide-Silicon Field-Effect Transistor gets it's name  

&lt;p&gt;Now when you apply a voltage to the base connected the the p-type it attracts the electrons close to the connection to the gate. And when enough electrons are near the top.&lt;/p&gt;



&lt;button onclick=&quot;toggleMOSFET()&quot;&gt; Toggle &lt;/button&gt;

&lt;span&gt; Status: &lt;/span&gt;
&lt;span id=&quot;MOSFET_status&quot; style=&quot;color:green&quot;&gt;ON&lt;/span&gt;

&lt;p&gt;
&lt;svg viewBox=&quot;0 0 720 400&quot; width=&quot;100%&quot; id=&quot;svgMOSFET&quot;&gt;
  &lt;rect width=&quot;200&quot; height=&quot;15&quot; x=&quot;230&quot; y=&quot;140&quot; fill=&quot;black&quot; /&gt;
  &lt;polyline points=&quot;330,140 330,0&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;4px&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;30px&quot; y=&quot;170px&quot; fill=&quot;#F7D154&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;230px&quot; y=&quot;170px&quot; fill=&quot;#1070CA&quot; /&gt;
  &lt;rect width=&quot;200px&quot; height=&quot;140px&quot; x=&quot;430px&quot; y=&quot;170px&quot; fill=&quot;#F7D154&quot; /&gt;
  &lt;rect id=&quot;svgMOSFET_diffusionArea&quot; width=&quot;200px&quot; height=&quot;20px&quot; x=&quot;230px&quot; y=&quot;170px&quot; fill=&quot;white&quot; opacity=&quot;0.5&quot; /&gt;
  &lt;rect id=&quot;svgMOSFET_diffusionArea2&quot; width=&quot;200px&quot; height=&quot;100px&quot; x=&quot;230px&quot; y=&quot;170px&quot; fill=&quot;white&quot; opacity=&quot;0.5&quot; /&gt;
  
&lt;/svg&gt;
&lt;/p&gt;

 &lt;script&gt; 

    const toggleMOSFET = () =&gt; {
      let status = document.getElementById(&quot;MOSFET_status&quot;);

      let firstLayer = document.getElementById(&quot;svgMOSFET_diffusionArea&quot;)
      let secondLayer = document.getElementById(&quot;svgMOSFET_diffusionArea2&quot;)

      if(status.innerHTML === &quot;ON&quot;){
        firstLayer.setAttribute('fill','none')
        secondLayer.setAttribute('fill','none')
        status.innerHTML = 'OFF'
        status.setAttribute('style','color: red')
      } else {
        firstLayer.setAttribute('fill','white')
        secondLayer.setAttribute('fill','white')
        status.innerHTML = 'ON'
        status.setAttribute('style','color: green')
      }
    }

 &lt;/script&gt;


&lt;p&gt;This breaks the np junction. Now that there is this base most the voltage potential is from the top to the bottom and not left to right. The electrons can move with little trouble&lt;/p&gt;

&lt;p&gt;In channel is formed that allows electrons to easily pass. There is no - and + difference to pass. Electrons can pass through without a change from - and +. This is called an n-channel.&lt;/p&gt;


### Quartz Rock

Our base raw material is quartz rock, a form of silicon dioxide 

Silicon makes up around 28% by mass of the earth's crust, the second after oxygen and technically we could use any silicon dioxide, but there is already an ultrapure silicon dioxide called quartzite, a type of quartz rock

Quartizite was originally sandstone, but it has been deeply buried in the Earth's crust and cooked at high temperatures and pressures that many impurities have been distilled out and the sand grains completely welded together.

&lt;p&gt;
&lt;img src=&quot;../assets/making-a-transistor/Quartzite.jpg&quot; style=&quot;max-width: 480px; width: 100%&quot; /&gt;
&lt;/p&gt;
&lt;span style=&quot;font-size:12px&quot;&gt;https://commons.wikimedia.org/wiki/File:Quartzite_Solli%C3%A8res.jpg&lt;/span&gt;


### Metallugical Silicon

The next step is to remove all of the oxygen present in silicon dioxide. This can be done though the following reaction

2SiO2 + 2C -&amp;gt; Si + 2CO

The process occurs in an electric arc furnance to a temperature of 2,000C and the quartz is mixed with highly pure coke. Coke is a highly pure carbon fuel made by heating coal in the absensce of air. 

This processs is know as a carbothermal reduction of silicon dioxide.

With the reaction above, there is a good chance of silicon carbide, SiC, forming. Excess SiO2 is used to help prevent this forming a secondary reaction.

2 SiC + SiO2 -&amp;gt; 3Si + 2CO

Now we have silicon with up to 99% purity but we are looking up to have &quot;eleven nines&quot; purity or 99.999999999%.

[Silicon wikipedia](https://en.wikipedia.org/wiki/Silicon#Metallurgical_grade)

### Ultra Pure Silicon (poly-silicon)

The next step is to remove the contaniments to get an ultra pure silicon we are looking for. 

The silicon is reacted with hydrogen chloride gas to form triclorosilane (SiHCl2)

Si + 3 HCl → HCl3Si + H2

Reduced to very pure solution by reacting it with hydrogen at high temperatures

HSiCl3 → Si + HCl + Cl2

Or triclorosilane can be converted to silicon tetrachloride, SiCl4, in a hydrogenation reactor and reduced by vapor phase epitaxy with hydrogen

SiCl4 + 2H2 -&amp;gt; Si + 4HCl

Depending on specifics of the cost, both process are used.

&lt;p&gt;
&lt;img src=&quot;../assets/making-a-transistor/PolySilicon.jpg&quot; style=&quot;max-width: 480px; width: 100%;&quot; /&gt;
&lt;/p&gt;
&lt;span style=&quot;font-size:12px&quot;&gt;http://images-of-elements.com/silicon.jpg&lt;/span&gt;


### Single crystal silicon (mono-silicon)

In a process called the Czochralski process the poly-silicon which contains mulitple crystals of silicon will be transformed into a single crystal

&lt;img src=&quot;../assets/making-a-transistor/Schematic_of_allotropic_forms_of_silcon.svg.png&quot; height=&quot;400px&quot; /&gt;    

&lt;span style=&quot;font-size:12px&quot;&gt; https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Schematic_of_allotropic_forms_of_silcon.svg/800px-Schematic_of_allotropic_forms_of_silcon.svg.png&lt;/span&gt;

A seed crystal is dipped into liquid pure silicon and slowly raised and rotated built the single cystal ingot of pure silicon.

As the crystal is being formed some containimates are pushed out if the contanimates aren't able to fit in that structure. This called zone refining

### Wafer

The ingot is sliced into wafer by a diamonded edged saw and cleaned to specifications.

&lt;img src=&quot;../assets/making-a-transistor/1024px-Siliziumwafer.JPG&quot; style=&quot;max-width:420px; width:100%;&quot; /&gt;

&lt;span style=&quot;font-size:12px&quot;&gt; https://upload.wikimedia.org/wikipedia/commons/thumb/f/f0/Siliziumwafer.JPG/1024px-Siliziumwafer.JPG&lt;/span&gt;

### Transistor

There are many types of transistors because of space, efficency and cost the metal-oxide-semiconductor FET (MOSFET) is currently the most used.

In this part we are going to look how it is built. Under each slide there are details on how it completed.

&lt;div class=&quot;slideShow&quot; style=&quot;padding: 20px&quot;&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Start with the P-Type Si Wafer&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;
&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;
&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;The start of the process is at the begining of the other. Usaully this is done in another facility called a foundary.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Oxide Grown&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;200&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;

&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;The first step is generate an SiO2 layer(0.5 -1 um thick) by thermal oxidation. Usally within the range of 900 to 1200 degrees C and a gas flow rate of 1cm/s&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Applied&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;200&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;200&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;


&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;

&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;Next step is first mask used by photolithography and is developed with raditation and the excess is removed &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Developed&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;200&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;60&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;140&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#C7CED4&quot; /&gt;



&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;

&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;The next step is to etch the material that is showing. A chemical is used to attack the oxide layer but not the photoresist or the silicon &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Oxide Etched&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;60&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;rect x=&quot;140&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;



&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;

&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;The next step is to etch the material that is showing. A chemical is used to attack the oxide layer but not the photoresist or the silicon &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Removed&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;60&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;rect x=&quot;140&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;



&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;The photoresist is removed using a solvent or plasma oxidation &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Phosphorus Diffused&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;65.5&quot; width=&quot;40&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;



&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;60&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;140&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;Phosphorus is diffused to make it an n-type region. This is done by Constant Surance Concentration Condition and followed by a drive-in diffusion under a Constant-Total-Dopant Conition  &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Oxide Grown&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;200&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;An oxide layer is grown again. The phosphorus spreads out a little due to diffusion but remains at a high concentration &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;PR Applied&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;25.5&quot; width=&quot;200&quot; height=&quot;45&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;200&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;The second photolithography is allplied (PR Drop -&amp;gt;Spinning -&amp;gt;Pre-Baking -&amp;gt;Mask Alignment-&amp;gt;UV Exposure -&amp;gt; PR Developing -&amp;gt; Rinsing and Drying -&amp;gt; Post-Baking -&amp;gt; Oxide Etching) as in Lithography #1 is use  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresit Developed&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;25.5&quot; width=&quot;80&quot; height=&quot;45&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;140&quot; y=&quot;25.5&quot; width=&quot;80&quot; height=&quot;45&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;200&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;100&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p style=&quot;margin-top:0;&quot;&gt;The second photolithography is allplied (PR Drop -&amp;gt;Spinning -&amp;gt;Pre-Baking -&amp;gt;Mask Alignment-&amp;gt;UV Exposure -&amp;gt; PR Developing -&amp;gt; Rinsing and Drying -&amp;gt; Post-Baking -&amp;gt; Oxide Etching) as in Lithography #1 is use  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Oxide Etched&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;25.5&quot; width=&quot;80&quot; height=&quot;45&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;140&quot; y=&quot;25.5&quot; width=&quot;80&quot; height=&quot;45&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;100&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;100&quot; y=&quot;260.5&quot; width=&quot;5&quot; height=&quot;40&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;260.5&quot; width=&quot;5&quot; height=&quot;40&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;PR Stripped&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;100&quot; y=&quot;260.5&quot; width=&quot;40&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;100&quot; y=&quot;260.5&quot; width=&quot;5&quot; height=&quot;40&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;260.5&quot; width=&quot;5&quot; height=&quot;40&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Gate Oxide Grown&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Added&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;25.5&quot; width=&quot;200&quot; height=&quot;56&quot; fill=&quot;#47B881&quot; /&gt;


&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;


&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Developed&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;25.5&quot; width=&quot;60&quot; height=&quot;56&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;25.5&quot; width=&quot;60&quot; height=&quot;56&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;25.5&quot; width=&quot;60&quot; height=&quot;56&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;80&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;80&quot; y=&quot;275.5&quot; width=&quot;10&quot; height=&quot;10&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;150&quot; y=&quot;275.5&quot; width=&quot;10&quot; height=&quot;10&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Oxide Etched&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;25.5&quot; width=&quot;60&quot; height=&quot;56&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;25.5&quot; width=&quot;60&quot; height=&quot;56&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;25.5&quot; width=&quot;60&quot; height=&quot;56&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;80&quot; y=&quot;275.5&quot; width=&quot;10&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;rect x=&quot;150&quot; y=&quot;275.5&quot; width=&quot;10&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Removed&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;


&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;80&quot; y=&quot;275.5&quot; width=&quot;10&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;

&lt;rect x=&quot;150&quot; y=&quot;275.5&quot; width=&quot;10&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;

&lt;/svg&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Aluminium Film Deposited&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20.5&quot; y=&quot;35.5&quot; width=&quot;44.5&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;60&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;70.5&quot; width=&quot;40&quot; height=&quot;12&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;175&quot; y=&quot;35.5&quot; width=&quot;44.5&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#66788A&quot; /&gt;




&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;270.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#66788A&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;286&quot;&gt;Aluminum&lt;/text&gt;
&lt;/svg&gt;
&lt;p&gt; Now a metal such as Aluminum is then evoporated and deposited on the surface to form a film to create the contacts  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Applied&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;20.5&quot; width=&quot;200&quot; height=&quot;55&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;20.5&quot; y=&quot;35.5&quot; width=&quot;44.5&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;60&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;70.5&quot; width=&quot;40&quot; height=&quot;12&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;175&quot; y=&quot;35.5&quot; width=&quot;44.5&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;




&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;270.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#66788A&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;286&quot;&gt;Aluminum&lt;/text&gt;
&lt;/svg&gt;
&lt;p&gt;  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Applied&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;45&quot; y=&quot;20.5&quot; width=&quot;50&quot; height=&quot;55&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;105&quot; y=&quot;20.5&quot; width=&quot;30&quot; height=&quot;55&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;145&quot; y=&quot;20.5&quot; width=&quot;50&quot; height=&quot;55&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;35.5&quot; width=&quot;45&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;60&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;100&quot; y=&quot;70.5&quot; width=&quot;40&quot; height=&quot;12&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;175&quot; y=&quot;35.5&quot; width=&quot;45&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#66788A&quot; /&gt;

&lt;rect x=&quot;105&quot; y=&quot;185.5&quot; width=&quot;30&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;45&quot; y=&quot;270.5&quot; width=&quot;50&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;145&quot; y=&quot;270.5&quot; width=&quot;50&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;



&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;270.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#66788A&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;286&quot;&gt;Aluminum&lt;/text&gt;
&lt;/svg&gt;
&lt;p&gt;  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Aluminum Etched&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;45&quot; y=&quot;20.5&quot; width=&quot;50&quot; height=&quot;55&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;105&quot; y=&quot;20.5&quot; width=&quot;30&quot; height=&quot;55&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;145&quot; y=&quot;20.5&quot; width=&quot;50&quot; height=&quot;55&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;45&quot; y=&quot;35.5&quot; width=&quot;20&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;60&quot; y=&quot;55.5&quot; width=&quot;35&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;105&quot; y=&quot;70.5&quot; width=&quot;30&quot; height=&quot;12&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;145&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;175&quot; y=&quot;35.5&quot; width=&quot;20&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;105&quot; y=&quot;185.5&quot; width=&quot;30&quot; height=&quot;200&quot; fill=&quot;#47B881&quot; /&gt;

&lt;rect x=&quot;45&quot; y=&quot;270.5&quot; width=&quot;50&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;rect x=&quot;145&quot; y=&quot;270.5&quot; width=&quot;50&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;



&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;270.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#66788A&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;286&quot;&gt;Aluminum&lt;/text&gt;
&lt;/svg&gt;
&lt;p&gt;  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;slide&quot;&gt;
&lt;h2&gt;Photoresist Removed&lt;/h2&gt;
&lt;svg width=&quot;722&quot; height=&quot;451&quot;&gt;

&lt;!-- Side View --&gt; 
&lt;rect x=&quot;20&quot; y=&quot;85.5&quot; width=&quot;200&quot; height=&quot;40&quot; fill=&quot;#1070CA&quot; /&gt;

&lt;rect x=&quot;45&quot; y=&quot;35.5&quot; width=&quot;20&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;60&quot; y=&quot;55.5&quot; width=&quot;35&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;105&quot; y=&quot;70.5&quot; width=&quot;30&quot; height=&quot;12&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;145&quot; y=&quot;55.5&quot; width=&quot;45&quot; height=&quot;30&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;175&quot; y=&quot;35.5&quot; width=&quot;20&quot; height=&quot;40&quot; fill=&quot;#66788A&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;180&quot; y=&quot;45.5&quot; width=&quot;40&quot; height=&quot;30&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;20&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;90&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;140&quot; y=&quot;65.5&quot; width=&quot;10&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;160&quot; y=&quot;65.5&quot; width=&quot;60&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;95&quot; y=&quot;80.5&quot; width=&quot;50&quot; height=&quot;5&quot; fill=&quot;#C7CED4&quot; /&gt;


&lt;rect x=&quot;55&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;rect x=&quot;135&quot; y=&quot;85.5&quot; width=&quot;50&quot; height=&quot;10&quot; fill=&quot;#F7D154&quot; /&gt;


&lt;!-- Top View --&gt;
&lt;rect x=&quot;20&quot; y=&quot;185.5&quot; width=&quot;200&quot; height=&quot;200&quot; fill=&quot;#C7CED4&quot; /&gt;

&lt;rect x=&quot;105&quot; y=&quot;185.5&quot; width=&quot;30&quot; height=&quot;200&quot; fill=&quot;#66788A&quot; /&gt;

&lt;rect x=&quot;45&quot; y=&quot;270.5&quot; width=&quot;50&quot; height=&quot;20&quot; fill=&quot;#66788A&quot; /&gt;
&lt;rect x=&quot;145&quot; y=&quot;270.5&quot; width=&quot;50&quot; height=&quot;20&quot; fill=&quot;#66788A&quot; /&gt;



&lt;!-- Legend  --&gt;
&lt;text x=&quot;260&quot; y=&quot;110&quot;&gt;Side View&lt;/text&gt;
&lt;text x=&quot;260&quot; y=&quot;284&quot;&gt;Top View&lt;/text&gt;


&lt;rect x=&quot;399.5&quot; y=&quot;100.5&quot; width=&quot;160&quot; height=&quot;200&quot; stroke=&quot;#66788A&quot; fill=&quot;transparent&quot; /&gt;

&lt;rect x=&quot;410&quot; y=&quot;110.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#1070CA&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;126&quot;&gt;P-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;150.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#F7D154&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;166&quot;&gt;N-Type Silicon&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;190.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#C7CED4&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;206&quot;&gt;Silicon Dioxide&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;230.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#47B881&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;246&quot;&gt;Photoresist&lt;/text&gt;
&lt;rect x=&quot;410&quot; y=&quot;270.5&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#66788A&quot; /&gt;
&lt;text x=&quot;440&quot; y=&quot;286&quot;&gt;Aluminum&lt;/text&gt;
&lt;/svg&gt;
&lt;p&gt;  &lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;style&gt;
.slide {height: 603px;}
&lt;/style&gt;



&lt;script&gt;

var slideIndex = 0
var min = 0
var max = 21

const showSlide = () =&gt; {
let slides = document.getElementsByClassName(&quot;slide&quot;)
slides = [].slice.call(slides); // Convert to array to use map function

slides.map((slide) =&gt; slide.style.display = &quot;none&quot;)

slides[slideIndex].style.display = &quot;block&quot;;
}

const next = () =&gt; {
if (slideIndex &lt; max)
showSlide(slideIndex += 1)
}
const back = () =&gt; {
if (slideIndex &gt; min)
showSlide(slideIndex -= 1)
}



showSlide()

&lt;/script&gt;

&lt;button onclick=&quot;back()&quot;&gt;Back&lt;/button&gt;
&lt;button onclick=&quot;next()&quot;&gt;Next&lt;/button&gt;

Thank you for reading. I enjoyed making this summary and learnt so much.
&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I recently finished the book CODE - a book on how to build a computer from scratch. The book was awesome and I wanted to learn more about how a physical computer was built</summary></entry><entry><title type="html">Rocket Or Tower</title><link href="/rocket-or-tower.html" rel="alternate" type="text/html" title="Rocket Or Tower" /><published>2018-08-01T00:00:00-04:00</published><updated>2018-08-01T00:00:00-04:00</updated><id>/rocket-or-tower</id><content type="html" xml:base="/rocket-or-tower.html">&lt;p&gt;Recently I started working on &lt;a href=&quot;https://fast.ai&quot;&gt;fast.ai&lt;/a&gt;, this is my attempt at creating a network.&lt;/p&gt;

&lt;h2&gt;Attempt One&lt;/h2&gt;

&lt;p&gt;My training set contains 10 rockets and 10 towers&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/rocket-or-tower/tower.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the the 3 line program from the fast.ai library for the precompiled model &lt;a href=&quot;https://github.com/KaimingHe/deep-residual-networks&quot;&gt;resnet&lt;/a&gt;

&lt;pre&gt;&lt;code&gt;
arch=resnet34
data = ImageClassifierData.from_paths(PATH, tfms=tfms_from_model(arch, sz))
learn = ConvLearner.pretrained(arch, data, precompute=True)
learn.fit(0.01, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0 is more rocket-like, 1 is more building-like&lt;/p&gt;

&lt;p&gt;With having only 10 examples of each. It is amazing how well it did. Only misclassifing the CN tower just barely to being a rocket

&lt;img src=&quot;../assets/rocket-or-tower/result.png&quot; width=&quot;722px&quot; /&gt;

&lt;h2&gt;Attempt Two&lt;/h2&gt;

&lt;p&gt;I added a lot more photos to about 300 each for training and 15 for the validation

&lt;p&gt;This time adding data augmentation, variable learning rate and unfreezing the model

&lt;h3&gt;Data Augmentation&lt;/h3&gt;

&lt;p&gt;Modify the image slightly to known effects of a camera. This is transformations that shift, zoom and flip the images. These are fed into the learning like any other image

&lt;pre&gt;&lt;code&gt;tfms = tfms_from_model(resnet34, sz, aug_tfms=transforms_side_on, max_zoom=1.1)&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&quot;../assets/rocket-or-tower/aug.png&quot; /&gt;


&lt;h3&gt;Stochastic Gradient Descent with Restarts&lt;/h3&gt;

&lt;p&gt;When a network is learning a function. It needs to start off high and reduce to gain more accuracy. This is included but also is restarted every epoch. This helps generalize the network, by trying avoiding narrow minimums. Creating a learning rate like this...

&lt;img src=&quot;../assets/rocket-or-tower/learning.png&quot; /&gt;

&lt;p&gt;This is improved a little bit more by slowing down the learning rate on the later epochs.

&lt;img src=&quot;../assets/rocket-or-tower/learning2.png&quot; /&gt;

&lt;h3&gt;Training the precomputed Model&lt;/h3&gt;

&lt;p&gt;Before training was done on the last few layers. This opens the begining layers. Also much lower learning rates are used in decreasing order to the earlier layers

&lt;pre&gt;&lt;code&gt;  learn.unfreeze()
lr=np.array([1e-4,1e-3,1e-2])
learn.fit(lr, 3, cycle_len=1, cycle_mult=2)&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Result&lt;/h3&gt;

&lt;p&gt;96.6% accuracy. With one error in classification

&lt;pre&gt;&lt;code&gt;  plot_confusion_matrix(cm, data.classes)&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&quot;../assets/rocket-or-tower/confusion.png&quot; /&gt;

&lt;p&gt;Below it the images it was most uncertain of including the incorrect labeling of the rocket on the bottom left

&lt;img src=&quot;../assets/rocket-or-tower/result2.png&quot; width=&quot;722px&quot; /&gt;

&lt;p&gt;Thank you&lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Recently I started working on fast.ai, this is my attempt at creating a network.</summary></entry><entry><title type="html">Automatic Paintball Turret</title><link href="/automatic-paintball-turret.html" rel="alternate" type="text/html" title="Automatic Paintball Turret" /><published>2017-09-01T00:00:00-04:00</published><updated>2017-09-01T00:00:00-04:00</updated><id>/automatic-paintball-turret</id><content type="html" xml:base="/automatic-paintball-turret.html">&lt;p&gt;For a mechatronics university course, we had a project to combine our electrical and mechanical knowledge. It was a very broad scope. Our team decided to make an automatic paintball turret, where it would autonomously track and shoot an object. Given how much we spend on it, it worked suprisingly well. In this article, I would like show you a brief overview on what we built and the things we learned.&lt;/p&gt;

&lt;p&gt;We broke the work into 2 parts&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Mechanical&lt;/strong&gt;, which would hold the paintball gun and be able to move it around. It needed to rotate in 3D space, around 90 deg field of view is good enough&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Software&lt;/strong&gt; for us to know how to move the turret and when it knows to shoot. This was more on the electronics and software side.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mechanical&quot;&gt;Mechanical&lt;/h2&gt;

&lt;p&gt;In order for the system to orient itself to aim at targets within it’s range, two rotational degrees of freedom were required. The first degree of freedom, a rotation about the vertical axis, will be referred to as pan. This aims the barrel of the paintball gun left or right. The second degree of freedom, a rotation about the horizontal axis, will be referred to as tilt. This aims the barrel of the gun up or down. To achieve these degrees of freedom, two motors were required to power the system. To avoid gear alignment and the need for optical encoders, direct drive servo motors were desirable.&lt;/p&gt;

&lt;p&gt;For a smooth pan rotation, it was desirable to remove any axial loads acting on the pan motor. For this reason, the weight of the assembly was supported on a large lazy susan bearing oriented for pan rotation. This lazy susan was rated well over the required weight and the square shape made for very easy mounting. The motor was mounted underneath in a non-load- bearing method.&lt;/p&gt;

&lt;p&gt;For a smooth tilt rotation, two lubricated bearings were selected to bear any radial loads due to weight, inertia, and recoil that would otherwise transfer directly to the motor. These bearings were sealed to prevent the possible intrusion of paint or dirt and flanged to make for easier mounting. An affordable half inch rod was selected to support all loads. To mount the motor to the shaft, horns were employed to simplify construction and minimize cost of the prototype.&lt;/p&gt;

&lt;p&gt;The housing was made out of ½” plywood. This selection made manufacturing simple, eliminated the need for a machine shop, and kept the housing relatively light. Before mounting the horns to the housing, the housing was suspended and with the use of a plumb the center of gravity was found to make the movement as smooth as possible. The entire assembly was mounted on a tripod constructed of ¾” schedule 40 steel piping. This allowed for flexibility in design with readily available materials. The weight of the tripod also provided for a low and stable centre of gravity. If additional mass was required the piping could be filled with sand.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-|- (Gun) -|-
 |         |
 -----------
 (Lazy Susan)
 ------------
   (Tripod)
   /  |   \
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;software&quot;&gt;Software&lt;/h2&gt;

&lt;p&gt;Camera -&amp;gt; Computer -&amp;gt; Arduino -&amp;gt; Stepper Controller -&amp;gt; Stepper Motors -&amp;gt; Turret&lt;/p&gt;

&lt;p&gt;We used a webcam which was attached to the base of the paintball gun holder. The camera data was sent to the computer over usb. The compyter was runing a python program with opencv library. The opencv did the heavy lifting of finding a color and selecting the “glob” with the most area of the camera and found the center, this was the target. We then sent the information to the arduino which converted the message to the stepper motors changing the direction of the paintball gun.&lt;/p&gt;

&lt;p&gt;The motor control system receives its input from either the video processing system or the joystick. An Arduino microcontroller receives serial position information over a USB link from PC processing the video. This takes the form of the ASCII character p for pan or t for tilt, followed by a step number between 0 and 1024 to signify the position between 0 and 320 degrees, finalized by a newline character ‘\n’. An example is p200/n, telling the pan motor to reach 62.5 degrees. The microcontroller ensures the position information is valid then calculates the time the motor has to move to the new position. This was calibrated as 2 milli seconds per change in step. Continuing the example, if pan started at position 300, it would have 200 milliseconds to move to position 200. The Herkulex DRS-0101 motors contain microcontrollers which plot a trapezoidal path between their current and final position. This reduces their peak power draw by ramping up, leveling off, then ramping down near the final position. The internal PID control is further explained in section 3.5. The DRS-0101 communicates over serial communication channel. The original Arduino library written by Alessandro Giacomel from Italy. Support was added for Arduino Due through additional control statements for the different build sections. The Arduino code written for this project will now build for Due, Uno, and all previous Arduinos which support either hardware UART Serial or SoftwareSerial.h.&lt;/p&gt;

&lt;p&gt;Target tracking was done by taking visual information from a webcam, processing this visual information and sending a message to the Arduino for the pan and tilt of the servos. The following paragraphs will break down the system that connects these elements. Using the python programming language and opencv, a set of various computer vision functions. The program is set up into 2 parts: initialization; and a loop that runs continuously during operation of the turret.&lt;/p&gt;

&lt;h3&gt;Motor PID Controller Tuning&lt;/h3&gt;

&lt;p&gt;The HerculeX DRS-0101 comes with a built in PID controller to improve motor control performance. Tuning this controller allowed for better response time, a reduction in overshoot and oscillation, and a minimized steady state error. A PID controller receives an error signal, in this case the difference between the current motor position and the desired motor position, and uses this error to send an ideal output to the motor.&lt;/p&gt;

&lt;p&gt;The equation defining the output of a PID controller can be defined as Where e(t) is the error signal, K p is the proportional constant, K i is the integral constant, K d is the derivative constant, and u(t) is the output signal to the motor. The proportional constant, K p , affects the output to the motor based on the current error signal. Increasing this constant will increase the response time of the system but possibly result in overshoot and oscillations.&lt;/p&gt;

&lt;p&gt;The integral constant, K i , affects the output based on the current error signal and the duration of error. Meaning that it affects the output based on past errors. Increasing this constant helps to eliminate offset in the steady state error but can lead to a lag in the response. The derivative constant, K d , controls the output based on the slope of the error. In other words, it affects the output to the motor based on future predicted errors. Increasing this constant results in a faster response and improves settling time but is sensitive to high frequencies in the system, for this reason, a low pass filter is required. In this case, the inertia of the system acts as a low pass filter.&lt;/p&gt;

&lt;p&gt;As mentioned, the HerculeX motors used in the system have built in PID controllers. The Servo Manager Kit software allows for the adjustment of position K p , position K i , and position K d constants of the motors. Originally, it was planned to employ the Ziegler-Nichols rules for tuning the PID controllers. These are experimental methods for determining PID constants by observing the step response of the system with both integral and derivative constants set to zero&lt;/p&gt;

&lt;p&gt;Note that on all vertical axes, the position is in the step units of the motor. After observing the system’s response, it seemed satisfactory for our purposes. The system was capable of settling within one second in all cases with very minimal overshoot. For this reason, additional tuning was not done.&lt;/p&gt;

&lt;h3&gt;Firing control&lt;/h3&gt;

&lt;p&gt;A key design choice made early in the project was selecting a paintball gun with an electronic trigger. This allowed the project to electronically trip the trigger instead of building an additional mechanical system to depress the trigger. Below in Figure 8 is a circuit diagram of the microcontroller and circuit within the Smart Parts Ion PaintBall Gun. Highlighted with the arrow is the mechanical micro switch trigger mechanism. When the switch is depressed pin 15 of the ATMega48v senses connection to ground from the NC connection through the switch. The spring loaded microswitch returns to open when not depressed. The microcontroller will only fire on the falling edge, leaving the trigger depressed will not allow the gun to fire until the microcontroller senses pin high again.&lt;/p&gt;

&lt;p&gt;The Arduino Uno used in the final design operates at 5v, while the paintball gun at 3.3v. To compensate for this difference, a voltage divider (as seen in Figure 9) was designed. This was an effective design as power draw by the paintball gun was nonexistent and the Arduino was wall powered, thus losses through the resistors were deemed acceptable.&lt;/p&gt;

&lt;p&gt;When you want to aim something but only have the perspective from another object is difficult.We wanted to take the webcam image and point the gun at a point in which the camera sees.&lt;/p&gt;

&lt;p&gt;First, I tried the simplest approach and assumed they saw the samething. The shots were off by a lot and it was most noticable on the edges of the frame.&lt;/p&gt;

&lt;p&gt;We needed to get the target in 3D space. First convert the 2D image seen from the camera. It is a 640 x 480 output, from an online source it was found the FOV was 60 Deg and from the aspect ration of 4:3. X had a view of 48 Deg and the y had a view of 36 Deg&lt;/p&gt;

&lt;p&gt;The next we had to place this point in 3D space, we are missing a distance. Don’t tell any one we just used a constant (10 m). Most things we were going to shot where going to be far enough to avoid rebound and it would not be accurate enough to hit anything further.&lt;/p&gt;

&lt;p&gt;Now with spheical cordiantes now in spheical corrdiantes we convert to cartistain to move our origin to get the position reative to the gun. Getting it is simple as adding the difference in the distance between the camera and the gun, shifting the coordinate system&lt;/p&gt;

&lt;p&gt;We are not done yet. The motors are looking for angle to be at. We do one more coordinate transmation and send the horizontal angle to the horizontal servo motor and the vertial to the vertial motor.&lt;/p&gt;

&lt;h3 id=&quot;it-takes-time-to-do-things&quot;&gt;It takes time to do things&lt;/h3&gt;

&lt;p&gt;It takes time for the motor to move and even get up to speed and It takes tiem for the projectile to reach its moving target. We needed to predict we there object will be and in what direction we needed to shot to hit it.&lt;/p&gt;

&lt;p&gt;Built in the coordinate transformation function is a target prediction that can be used to estimate where the target will be in a defined period of time. It is using simple linear extrapolation of the position based the targets current velocity, illustrated in Figure 5.&lt;/p&gt;

&lt;p&gt;Figure 5: Linear extrapolation of a velocity vector&lt;/p&gt;

&lt;p&gt;The velocity is estimated by comparing the current and previous frame and observing how far the centres of the object have moved. Using this distance and the time elapsed, the velocity of the object can be found. To predict the next position the current position is taken and added to the velocity times a defined period of ‘leading’ time which represents how far ahead we would like to predict. Longer periods of leading time can be used to track fast moving or long-distance targets. However, accuracy will likely decrease with longer leading times.&lt;/p&gt;

&lt;p&gt;We had to make some comprimises in our code, to bring on the code. We started trying to do most of the calculatoin on the arduino. That ended quickly when we wanted to use the opencv library.&lt;/p&gt;

&lt;p&gt;We had a laptop which was already getting up there in age being 6 years old at the time. It could only process 1 frame per second. We reduced the complexity of the calcultion, reduced the camera resolutoin by half.&lt;/p&gt;

&lt;p&gt;The first step is to retrieve a frame from the camera. The camera being used is the Logitech C270 HD Webcam, with a frame displaying 640 by 480 pixels. This gives a total pixel count of 640*480 = 307200 pixels. Each pixel contains 3 numbers to define its state. The frame uses RGB(red, green and blue), each colour is a number between 0 and 255 which fits in one byte. The frame is written to a file and blurred slightly to reduce noise and make contours of greater uniformity.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;During field testing, the compressed air line and paintballs were added to the paintball sentry. As this additional mass was not accounted for during initial testing and motor tuning, the tilt servo motor was overloaded causing it to stall and eventually caused internal gear damage. Future designs should account for masses added to the gun during use. Additionally, alternate housing designs should be considered to reduce weight. &lt;/p&gt;

&lt;p&gt;Future projects should consider using the HerkuleX motor line as their serial communication and internal PID control made for excellent prototyping. &lt;/p&gt;

&lt;p&gt;A functional paintball sentry turret was successfully constructed. It successfully tracked targets of a designated color, transformed coordinates of the targets into motor positions, engaged the motors to reorient to aim at the target, and fired paintballs precisely and with reasonable accuracy. With the success a few lessons were learned, the largest being the importance of sizing an adequate motor and balancing the load
&lt;/p&gt;</content><author><name></name></author><summary type="html">For a mechatronics university course, we had a project to combine our electrical and mechanical knowledge. It was a very broad scope. Our team decided to make an automatic paintball turret, where it would autonomously track and shoot an object. Given how much we spend on it, it worked suprisingly well. In this article, I would like show you a brief overview on what we built and the things we learned.</summary></entry><entry><title type="html">Altitude</title><link href="/altitude.html" rel="alternate" type="text/html" title="Altitude" /><published>2017-01-01T00:00:00-05:00</published><updated>2017-01-01T00:00:00-05:00</updated><id>/altitude</id><content type="html" xml:base="/altitude.html">&lt;p&gt;Altitude is a time-budgeting app making you more productive. &lt;/p&gt;

&lt;p&gt;&lt;a style=&quot;padding-left:7px;&quot; href=&quot;https://github.com/lazydancer/altitude&quot;&gt;Github »&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tools:&lt;/p&gt;

&lt;svg fill=&quot;#61DAFB&quot; width=&quot;48px&quot; height=&quot;48px&quot; style=&quot;padding-left: 8px;&quot; role=&quot;img&quot; viewBox=&quot;0 0 24 24&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;title&gt;React&lt;/title&gt;&lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;2.139&quot; /&gt;&lt;path d=&quot;M6.008 16.255l-.472-.12C2.018 15.246 0 13.737 0 11.996s2.018-3.25 5.536-4.139l.472-.119.133.468a23.53 23.53 0 0 0 1.363 3.578l.101.213-.101.213a23.307 23.307 0 0 0-1.363 3.578l-.133.467zM5.317 8.95c-2.674.751-4.315 1.9-4.315 3.046 0 1.145 1.641 2.294 4.315 3.046a24.95 24.95 0 0 1 1.182-3.046A24.752 24.752 0 0 1 5.317 8.95zM17.992 16.255l-.133-.469a23.357 23.357 0 0 0-1.364-3.577l-.101-.213.101-.213a23.42 23.42 0 0 0 1.364-3.578l.133-.468.473.119c3.517.889 5.535 2.398 5.535 4.14s-2.018 3.25-5.535 4.139l-.473.12zm-.491-4.259c.48 1.039.877 2.06 1.182 3.046 2.675-.752 4.315-1.901 4.315-3.046 0-1.146-1.641-2.294-4.315-3.046a24.788 24.788 0 0 1-1.182 3.046z&quot; /&gt;&lt;path d=&quot;M5.31 8.945l-.133-.467C4.188 4.992 4.488 2.494 6 1.622c1.483-.856 3.864.155 6.359 2.716l.34.349-.34.349a23.552 23.552 0 0 0-2.422 2.967l-.135.193-.235.02a23.657 23.657 0 0 0-3.785.61l-.472.119zm1.896-6.63c-.268 0-.505.058-.705.173-.994.573-1.17 2.565-.485 5.253a25.122 25.122 0 0 1 3.233-.501 24.847 24.847 0 0 1 2.052-2.544c-1.56-1.519-3.037-2.381-4.095-2.381zM16.795 22.677c-.001 0-.001 0 0 0-1.425 0-3.255-1.073-5.154-3.023l-.34-.349.34-.349a23.53 23.53 0 0 0 2.421-2.968l.135-.193.234-.02a23.63 23.63 0 0 0 3.787-.609l.472-.119.134.468c.987 3.484.688 5.983-.824 6.854a2.38 2.38 0 0 1-1.205.308zm-4.096-3.381c1.56 1.519 3.037 2.381 4.095 2.381h.001c.267 0 .505-.058.704-.173.994-.573 1.171-2.566.485-5.254a25.02 25.02 0 0 1-3.234.501 24.674 24.674 0 0 1-2.051 2.545z&quot; /&gt;&lt;path d=&quot;M18.69 8.945l-.472-.119a23.479 23.479 0 0 0-3.787-.61l-.234-.02-.135-.193a23.414 23.414 0 0 0-2.421-2.967l-.34-.349.34-.349C14.135 1.778 16.515.767 18 1.622c1.512.872 1.812 3.37.824 6.855l-.134.468zM14.75 7.24c1.142.104 2.227.273 3.234.501.686-2.688.509-4.68-.485-5.253-.988-.571-2.845.304-4.8 2.208A24.849 24.849 0 0 1 14.75 7.24zM7.206 22.677A2.38 2.38 0 0 1 6 22.369c-1.512-.871-1.812-3.369-.823-6.854l.132-.468.472.119c1.155.291 2.429.496 3.785.609l.235.02.134.193a23.596 23.596 0 0 0 2.422 2.968l.34.349-.34.349c-1.898 1.95-3.728 3.023-5.151 3.023zm-1.19-6.427c-.686 2.688-.509 4.681.485 5.254.987.563 2.843-.305 4.8-2.208a24.998 24.998 0 0 1-2.052-2.545 24.976 24.976 0 0 1-3.233-.501z&quot; /&gt;&lt;path d=&quot;M12 16.878c-.823 0-1.669-.036-2.516-.106l-.235-.02-.135-.193a30.388 30.388 0 0 1-1.35-2.122 30.354 30.354 0 0 1-1.166-2.228l-.1-.213.1-.213a30.3 30.3 0 0 1 1.166-2.228c.414-.716.869-1.43 1.35-2.122l.135-.193.235-.02a29.785 29.785 0 0 1 5.033 0l.234.02.134.193a30.006 30.006 0 0 1 2.517 4.35l.101.213-.101.213a29.6 29.6 0 0 1-2.517 4.35l-.134.193-.234.02c-.847.07-1.694.106-2.517.106zm-2.197-1.084c1.48.111 2.914.111 4.395 0a29.006 29.006 0 0 0 2.196-3.798 28.585 28.585 0 0 0-2.197-3.798 29.031 29.031 0 0 0-4.394 0 28.477 28.477 0 0 0-2.197 3.798 29.114 29.114 0 0 0 2.197 3.798z&quot; /&gt;&lt;/svg&gt;

&lt;svg fill=&quot;#764ABC&quot; width=&quot;48px&quot; height=&quot;48px&quot; style=&quot;padding-left: 8px;&quot; role=&quot;img&quot; viewBox=&quot;0 0 24 24&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;title&gt;Redux&lt;/title&gt;&lt;path d=&quot;M16.633 16.504c.869-.075 1.543-.84 1.499-1.754-.046-.914-.795-1.648-1.708-1.648h-.061c-.943.031-1.678.824-1.648 1.769.03.479.226.869.494 1.153-1.048 2.038-2.621 3.536-5.004 4.795-1.603.838-3.296 1.154-4.944.929-1.378-.194-2.456-.81-3.116-1.798-.988-1.499-1.078-3.116-.255-4.734.601-1.169 1.499-2.023 2.099-2.443-.15-.389-.33-1.048-.42-1.542-4.436 3.177-3.985 7.521-2.637 9.574 1.004 1.498 3.057 2.456 5.304 2.456.599 0 1.229-.044 1.843-.194 3.896-.749 6.847-3.086 8.54-6.532l.014-.031z&quot; /&gt;&lt;path d=&quot;M21.981 12.758c-2.321-2.727-5.738-4.225-9.634-4.225h-.51c-.253-.554-.837-.899-1.497-.899h-.045c-.943 0-1.678.81-1.647 1.753.03.898.794 1.648 1.708 1.648h.074c.675-.03 1.259-.45 1.498-1.049h.555c2.309 0 4.495.674 6.488 1.992 1.527 1.004 2.622 2.322 3.236 3.896.538 1.288.509 2.547-.045 3.597-.854 1.647-2.293 2.517-4.195 2.517-1.199 0-2.367-.375-2.967-.644-.359.298-.959.793-1.394 1.093 1.318.598 2.652.943 3.94.943 2.922 0 5.093-1.647 5.918-3.236.898-1.798.824-4.824-1.469-7.416l-.014.03z&quot; /&gt;&lt;path d=&quot;M6.49 17.042c.029.899.793 1.648 1.708 1.648h.06c.959-.03 1.693-.823 1.648-1.768 0-.899-.779-1.647-1.693-1.647h-.061c-.06 0-.149 0-.225.029-1.243-2.098-1.768-4.346-1.572-6.771.119-1.828.719-3.417 1.797-4.735.899-1.124 2.592-1.679 3.746-1.708 3.236-.061 4.585 3.971 4.689 5.574l1.498.449c-.345-4.914-3.4-7.492-6.322-7.492-2.742 0-5.273 1.993-6.293 4.915-1.393 3.896-.479 7.641 1.229 10.638-.149.195-.239.539-.209.868z&quot; /&gt;&lt;/svg&gt;

&lt;svg height=&quot;48&quot; width=&quot;48&quot; style=&quot;padding-left: 8px;&quot; viewBox=&quot;0 0 64 64&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;title&gt;Electron&lt;/title&gt;&lt;g fill=&quot;#47848f&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;path d=&quot;M23.3 13.76c-8.35-1.53-14.97.07-17.6 4.63-1.97 3.4-1.4 7.92 1.36 12.75a.86.86 0 0 0 1.49-.85c-2.5-4.35-2.98-8.25-1.37-11.04 2.2-3.8 8.1-5.21 15.82-3.8a.86.86 0 0 0 .3-1.7zM11.42 37a53.67 53.67 0 0 0 12.79 10.1c12.13 7 25.04 8.87 31.4 4.53a.86.86 0 1 0-.96-1.42c-5.7 3.89-17.96 2.11-29.59-4.6a51.97 51.97 0 0 1-12.37-9.76A.86.86 0 1 0 11.4 37z&quot; /&gt;&lt;path d=&quot;M53.58 35.97c5.47-6.47 7.39-12.98 4.76-17.53-1.94-3.36-6.03-5.13-11.47-5.2a.86.86 0 0 0-.02 1.72c4.89.06 8.42 1.59 10 4.33 2.19 3.79.48 9.59-4.58 15.57a.86.86 0 1 0 1.3 1.1zM39.5 14.04a53.56 53.56 0 0 0-15.28 6.06C11.7 27.33 3.52 38 4.66 45.72a.86.86 0 0 0 1.7-.25c-1-6.86 6.74-16.97 18.72-23.89a51.85 51.85 0 0 1 14.78-5.86.86.86 0 0 0-.36-1.68z&quot; /&gt;&lt;path d=&quot;M19.21 51.08c2.87 8 7.55 12.92 12.82 12.92 3.84 0 7.4-2.62 10.17-7.23a.86.86 0 0 0-1.47-.88c-2.5 4.14-5.55 6.4-8.7 6.4-4.38 0-8.55-4.4-11.2-11.79a.86.86 0 0 0-1.62.58zm26.16-1.56a53.85 53.85 0 0 0 2.28-15.9c0-14.2-4.98-26.45-12.06-29.6a.86.86 0 1 0-.7 1.57c6.32 2.8 11.04 14.43 11.04 28.03 0 5.53-.77 10.82-2.2 15.39a.86.86 0 1 0 1.64.5zM61.52 48.68a4.1 4.1 0 1 0-8.2 0 4.1 4.1 0 0 0 8.2 0zm-1.71 0a2.39 2.39 0 1 1-4.78 0 2.39 2.39 0 0 1 4.78 0zM6.58 52.78a4.1 4.1 0 1 0 0-8.2 4.1 4.1 0 0 0 0 8.2zm0-1.71a2.39 2.39 0 1 1 0-4.78 2.39 2.39 0 0 1 0 4.78z&quot; /&gt;&lt;path d=&quot;M32.03 8.2a4.1 4.1 0 1 0 0-8.2 4.1 4.1 0 0 0 0 8.2zm0-1.7a2.39 2.39 0 1 1 0-4.78 2.39 2.39 0 0 1 0 4.77zM32.66 36.53a2.97 2.97 0 1 1-1.26-5.81 2.97 2.97 0 0 1 1.26 5.8z&quot; /&gt;&lt;/g&gt;&lt;/svg&gt;

&lt;p&gt;In this project I used React, Redux and Electron. After starting this project in Angular, I changed my path to React. I found Angular to be too rigid and I got to a point where I couldn’t add anything expect the most simple actions. I tried Redux, I would recommend not using it to start a new project. It add more complexity while not offseting the benefits.&lt;/p&gt;

&lt;p&gt;Electron was an interesting test and I would use it in the future. It is great to have the same enviroment over all operating systems and writing in HTML, CSS and Javascript&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/altitude/altitude.png&quot; width=&quot;100%&quot; style=&quot;margin-top:18px&quot; /&gt;
&lt;img src=&quot;/assets/altitude/work.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Altitude is a time-budgeting app making you more productive.</summary></entry></feed>